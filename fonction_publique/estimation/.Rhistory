{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
##  I.2 Load NBER profiles (without France so far) ##
# Loading profile from UK, Ger and It
data_men = read.csv(file = paste0(chemin_profils, "us_de_it_men.csv"), sep = ";")
data_women = read.csv(file = paste0(chemin_profils, "us_de_it_women.csv"), sep = ";")
data_us_de_it = cbind(data_men, data_women[, -1])
var = c("women1", "women2", "women3", "men1", "men2", "men3")
data_fr_merge = data_fr[which(data_fr$year == 2010), c("age", var)]
names(data_fr_merge) = c("age", paste0(var, "_fr"))
data_aggr = merge(data_us_de_it, data_fr_merge,
by = "age", all.x = T)
# Modif (numeric for It, fill na for F)
var_it = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_it")
for (v in var_it){data_aggr[, v] = as.numeric(as.character(data_aggr[, v])) }
var_fr = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_fr")
for (v in var_fr){data_aggr[which(data_aggr$age>= age_max), v] = na.locf(data_aggr[which(data_aggr$age>= age_max), v])}
data_aggr$women1_mean = rowMeans(data_aggr[, paste0("women1", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women2_mean = rowMeans(data_aggr[, paste0("women2", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women3_mean = rowMeans(data_aggr[, paste0("women3", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men1_mean   = rowMeans(data_aggr[, paste0("men1",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men2_mean   = rowMeans(data_aggr[, paste0("men2",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men3_mean   = rowMeans(data_aggr[, paste0("men3",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr = data_aggr[which(data_aggr$age > 15 & data_aggr$age < 70 ), ]
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
View(data_aggr_merge)
data1 = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
data2 = cbind(data_fr, data_aggr_merge)
unique(data_fr^$age)
unique(data_fr$age)
unique(data_aggr$age)
data_fr = data_fr[which(data_fr$age < 70),]
### Adding aggregated profile of 2010 to French profil and replicate until 1980
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
data1 = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
data2 = cbind(data_fr, data_aggr_merge)
data1 = data1[order(data1$year, data1$age), ]
data2 = data1[order(data2$year, data2$age), ]
data2[,3]-data2[,4]
data1 = data1[order(data1$year, data1$age), ]
data2 = data2[order(data2$year, data2$age), ]
data1[,3]-data2[,3]
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
simul_path  = "M:/CNRACL/simulation/results/"
python_file_path = 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "Q:/CNRACL/Note CNRACL/Figures/"
}
setwd(wd)
if (user == "temp")
{
wd =  'C:/Users/s.rabate/Desktop/temp/estimation/'
data_path = "C:/Users/s.rabate/Desktop/temp/data/"
save_model_path = "C:/Users/s.rabate/Desktop/temp/predictions/"
simul_path  = "C:/Users/s.rabate/Desktop/temp/simulation/results/"
python_file_path = 'C:/Users/s.rabate/Desktop/temp/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "C:/Users/s.rabate/Desktop/temp/Note CNRACL/Figures/"
tab_path = "C:/Users/s.rabate/Desktop/temp/Note CNRACL/Figures/"
}
setwd(wd)
chemin_donnee
rm(list = ls()); gc()
place = 'ipp'
place = 'mac'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource   <-  "/Users/simonrabate/Dropbox/NBER/"
chemin_macro   <-  "/Users/simonrabate/Dropbox/NBER/data/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/data/"
chemin_profils <- "/Users/simonrabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
# PENSIPP
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsMS.R"         )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsPensIPP.R"    )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsLeg.R"        )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsRetr.R"     )) )
place = 'mac'
place = 'ipp'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource   <-  "/Users/simonrabate/Dropbox/NBER/"
chemin_macro   <-  "/Users/simonrabate/Dropbox/NBER/data/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/data/"
chemin_profils <- "/Users/simonrabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
# PENSIPP
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsMS.R"         )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsPensIPP.R"    )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsLeg.R"        )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsRetr.R"     )) )
list
UseOpt("nodra")
Option
Options
sexe[1:10]
table(sexe)
load(file = paste0(chemin_donnee, "bios4.Rdata"))
data_indiv$sexe = as.numeric(data_indiv$sexe )
data_indiv$type = as.numeric(data_indiv$type )
data_indiv$profiles = as.numeric(data_indiv$profiles)
data_indiv$sexe
names(data_indiv)
# Clone d'un individu avec les caractéristiques du conjoint.
if (data_indiv$sexe[i] == 1){s_spouse= 2; g_spouse = data_indiv$gen[i] - 3;  ty_spouse = data_indiv$type[i]}
if (data_indiv$sexe[i] == 2){s_spouse= 1; g_spouse = data_indiv$gen[i] + 3;  ty_spouse = data_indiv$type[i]}
list_conjoint = which(data_indiv$sexe == s_spouse & data_indiv$gen == g_spouse & data_indiv$type == ty_spouse )
j = list_conjoint[1]
i = 1000
# Clone d'un individu avec les caractéristiques du conjoint.
if (data_indiv$sexe[i] == 1){s_spouse= 2; g_spouse = data_indiv$gen[i] - 3;  ty_spouse = data_indiv$type[i]}
if (data_indiv$sexe[i] == 2){s_spouse= 1; g_spouse = data_indiv$gen[i] + 3;  ty_spouse = data_indiv$type[i]}
list_conjoint = which(data_indiv$sexe == s_spouse & data_indiv$gen == g_spouse & data_indiv$type == ty_spouse )
j = list_conjoint[1]
j
t1 = t_naiss[i]  + ages[ag1]
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[j])
t2 = t_naiss[j]  + ageliq_conjoint
Liq2(j, t2)
age = seq(55,70,1)
trliq    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
agemin    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_rg    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_fp <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_aa <- matrix(ncol=length(age), nrow=nrow(data_indiv))
ssw       <- matrix(ncol=length(age), nrow=nrow(data_indiv))
sa_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
pro_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
tauxliq_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
accrual    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
accrual_rel <- matrix(ncol=length(age), nrow=nrow(data_indiv))
taxrate     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_pliq     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_pliq_rg  <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_sam      <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_prorat   <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_taux     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
list =   which(data_indiv$gen >= 1915 & data_indiv$gen <= 1955 )
RevaloRG = 0
print(c("Individu  ", i))
ages = 55:70
print(c("Individu  ", i))
ages = 55:70
M_pension = matrix(0, ncol = length(ages), nrow =  length(ages))
M_TR = matrix(0, ncol = length(ages), nrow =  length(ages))
M_sam = matrix(0, ncol = length(ages), nrow =  length(ages))
M_prorat = matrix(0, ncol = length(ages), nrow =  length(ages))
M_taux = matrix(0, ncol = length(ages), nrow =  length(ages))
M_pension_rg = matrix(0, ncol = length(ages), nrow =  length(ages))
M_ssw  = matrix(0, ncol = length(ages), nrow =  length(ages))
M_agemin  = matrix(0, ncol = length(ages), nrow =  length(ages))
ty = type[i]
s = sexe[i]
load(file = paste0(chemin_donnee, "bios4.Rdata"))
data_indiv$sexe = as.numeric(data_indiv$sexe )
data_indiv$type = as.numeric(data_indiv$type )
data_indiv$profiles = as.numeric(data_indiv$profiles)
ident = data_indiv$ident
t_naiss = data_indiv$gen - 1900
type = as.numeric(data_indiv$type)
sexe = data_indiv$sexe
profiles = data_indiv$profiles
generation =data_indiv$gen
trim_naiss[] = 1
if (data_indiv$sexe[i] == 1){s_spouse= 2; g_spouse = data_indiv$gen[i] - 3;  ty_spouse = data_indiv$type[i]}
if (data_indiv$sexe[i] == 2){s_spouse= 1; g_spouse = data_indiv$gen[i] + 3;  ty_spouse = data_indiv$type[i]}
list_conjoint = which(data_indiv$sexe == s_spouse & data_indiv$gen == g_spouse & data_indiv$type == ty_spouse )
j = list_conjoint[1]
# Liquidation
t1 = t_naiss[i]  + ages[ag1]
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[j])
t2 = t_naiss[j]  + ageliq_conjoint
Liq2(j, t2)
ages
ag = 44
ag = 1
t1 = t_naiss[i]  + ages[ag1]
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[j])
t2 = t_naiss[j]  + ageliq_conjoint
ag1 = 1
ageliq_conjoint =  60
t1 = t_naiss[i]  + ages[ag1]
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[j])
t2 = t_naiss[j]  + ageliq_conjoint
Liq2(j, t2)
survie[s_spouse, adeb:amax, ty_spouse]
survie_nber = read.csv(file = paste0(chemin_donnee, "SurvivalRates.csv"), sep = ";", stringsAsFactors=FALSE)
survie  <- array(1, dim = c(2, 100, 3)) # Dim = sexe/age/categ
survie[1, 15:100, 1] <- as.numeric(survie_nber[-1, 5])
survie[1, 15:100, 2] <- as.numeric(survie_nber[-1, 6])
survie[1, 15:100, 3] <- as.numeric(survie_nber[-1, 7])
survie[2, 15:100, 1] <- as.numeric(survie_nber[-1, 2])
survie[2, 15:100, 2] <- as.numeric(survie_nber[-1, 3])
survie[2, 15:100, 3] <- as.numeric(survie_nber[-1, 5])
age_eval
age_eval  = ages[ag1]
age_eval
survie[s_spouse, adeb:amax, ty_spouse]
adeb <- age_ret
amax <- 100
ageliq_conjoint
adeb <- ageliq_conjoint
amax <- 100
v_deces_conjoint  <- survie[s_spouse, adeb:amax, ty_spouse]
v_deces_conjoint
1 - survie[s_spouse, adeb:amax, ty_spouse]
pension
pension[j]
pension_rg[j]
# Chemin
rm(list = ls()); gc()
place = 'mac'
place = 'ipp'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource   <-  "/Users/simonrabate/Dropbox/NBER/"
chemin_macro   <-  "/Users/simonrabate/Dropbox/NBER/data/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/data/"
chemin_profils <- "/Users/simonrabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
# PENSIPP
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsMS.R"         )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsPensIPP.R"    )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsLeg.R"        )) )
source( (paste0(cheminsource,"Modele/Outils/OutilsRetraite/OutilsRetr.R"     )) )
# Outils
source( paste0(cheminsource,"/17-11-Munich/programmes/OutilsIV.R"))
# Load data
load(file = paste0(chemin_donnee, "bios4.Rdata"))
data_indiv$sexe = as.numeric(data_indiv$sexe )
data_indiv$type = as.numeric(data_indiv$type )
data_indiv$profiles = as.numeric(data_indiv$profiles)
ident = data_indiv$ident
t_naiss = data_indiv$gen - 1900
type = as.numeric(data_indiv$type)
sexe = data_indiv$sexe
profiles = data_indiv$profiles
generation =data_indiv$gen
trim_naiss[] = 1
## Survival  ##
survie_nber = read.csv(file = paste0(chemin_donnee, "SurvivalRates.csv"), sep = ";", stringsAsFactors=FALSE)
survie  <- array(1, dim = c(2, 100, 3)) # Dim = sexe/age/categ
survie[1, 15:100, 1] <- as.numeric(survie_nber[-1, 5])
survie[1, 15:100, 2] <- as.numeric(survie_nber[-1, 6])
survie[1, 15:100, 3] <- as.numeric(survie_nber[-1, 7])
survie[2, 15:100, 1] <- as.numeric(survie_nber[-1, 2])
survie[2, 15:100, 2] <- as.numeric(survie_nber[-1, 3])
survie[2, 15:100, 3] <- as.numeric(survie_nber[-1, 5])
# Load LFP
participation_rates = read.csv(file = paste0(chemin_donnee, "participation_rates.csv"), sep = ";", stringsAsFactors=FALSE)
# Modif revalo
RevaloSPC[109:200]  = 1.02
#### I. Fonctions ####
SSW <- function(age_eval, age_ret, p, tx_rev, beta=0.98, s = 1, ty = 1)
## Calcul du  SSW  associ? ? chaque ?ge de d?part ? la retraite (en colonne), en fonction de l'?ge
# auquel ce montant est ?valu? (en ligne)
{
amin <- age_eval
adeb <- age_ret
amax <- 100
# Vecteur proba de survie
v_esp  <- survie[s, amin:amax, ty]
# Vecteur discounting
v_disc <- beta**(seq(0,length(v_esp)-1))
# Vecteur revalo
v_disc <- beta**(seq(0,length(v_esp)-1))
# Vecteur revalo
v_rev <-numeric(length(v_esp))
v_rev[(adeb-amin+1):length(v_esp)] <- (1 + tx_rev)**(seq(0,length(v_esp)-adeb+amin-1))
# Vecteur pension
v_pension <-numeric(length(v_esp))
v_pension[(adeb-amin+1):length(v_pension)] <- p
# SSW: produit matriciel des trois vecteurs
#print(c(i, a, length(v_disc), length(v_esp)))
v <- v_pension* v_disc*v_esp*v_rev
return(sum(v))
}
compute_ssw_survivor <- function(i, age_eval = 55, ageliq_conjoint, tx_rev, beta=0.98, s_spouse = 1, ty_spouse = 1)
## Calcul du  SSW  associé à la pension du conjoint décédé:
# Simplifications:
# - Taux unique de 50% de la pension
# - Pas de mort du conjoint avec l'age de départ (quelle règle de calcul des pensions?)
# - Discount (proba et pref) fixé à partir de 60 ans.
{
# Choix d'un individu avec les caractéristiques du conjoint.
if (data_indiv$sexe[i] == 1){s_spouse= 2; g_spouse = data_indiv$gen[i] - 3;  ty_spouse = data_indiv$type[i]}
if (data_indiv$sexe[i] == 2){s_spouse= 1; g_spouse = data_indiv$gen[i] + 3;  ty_spouse = data_indiv$type[i]}
list_conjoint = which(data_indiv$sexe == s_spouse & data_indiv$gen == g_spouse & data_indiv$type == ty_spouse )
j = list_conjoint[1]
Clone(j, 1)
# Liquidation
t1 = t_naiss[i]  + age_eval
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[1])
t2 = t_naiss[1]  + ageliq_conjoint
Liq2(1, t2)
# Calcul SSW
amin <- age_eval
adeb <- ageliq_conjoint
amax <- 100
# Vecteur proba de perception de la pension (ie de la mort du conjoint)
v_deces_conjoint  <- 1 - survie[s_spouse, adeb:amax, ty_spouse]
# Vecteur proba de survie
v_esp  <- survie[s, adeb:amax, ty]
# Vecteur discounting
v_disc <- beta**(seq(0,length(v_esp)-1))
# Vecteur revalo
v_rev <-numeric(length(v_esp))
v_rev[(adeb-amin+1):length(v_esp)] <- (1 + tx_rev)**(seq(0,length(v_esp)-adeb+amin-1))
# Vecteur pension
v_pension <-numeric(length(v_esp))
v_pension[(adeb-amin+1):length(v_pension)] <- pension[1]
# SSW: produit matriciel des trois vecteurs
#print(c(i, a, length(v_disc), length(v_esp)))
v <- v_pension*v_deces_conjoint*v_disc*v_esp*v_rev
ssw_conjoint = sum(v)
return(ssw_conjoint)
}
#### II. Calcul des IV par generation:  ####
age = seq(55,70,1)
trliq    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
agemin    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_rg    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_fp <- matrix(ncol=length(age), nrow=nrow(data_indiv))
penliq_aa <- matrix(ncol=length(age), nrow=nrow(data_indiv))
ssw       <- matrix(ncol=length(age), nrow=nrow(data_indiv))
ssw_rev   <- matrix(ncol=length(age), nrow=nrow(data_indiv))
sa_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
pro_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
tauxliq_rg     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
accrual    <- matrix(ncol=length(age), nrow=nrow(data_indiv))
accrual_rel <- matrix(ncol=length(age), nrow=nrow(data_indiv))
taxrate     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
taxrate_rev <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_pliq     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_pliq_rg  <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_sam      <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_prorat   <- matrix(ncol=length(age), nrow=nrow(data_indiv))
delta_taux     <- matrix(ncol=length(age), nrow=nrow(data_indiv))
list =   which(data_indiv$gen >= 1915 & data_indiv$gen <= 1955 )
RevaloRG = 0
UseOpt("nodra")
#UseOpt("")
for (i in list)
{
print(c("Individu  ", i))
ages = 55:70
M_pension = matrix(0, ncol = length(ages), nrow =  length(ages))
M_TR = matrix(0, ncol = length(ages), nrow =  length(ages))
M_sam = matrix(0, ncol = length(ages), nrow =  length(ages))
M_prorat = matrix(0, ncol = length(ages), nrow =  length(ages))
M_taux = matrix(0, ncol = length(ages), nrow =  length(ages))
M_pension_rg = matrix(0, ncol = length(ages), nrow =  length(ages))
M_ssw  = matrix(0, ncol = length(ages), nrow =  length(ages))
M_ssw_rev  = matrix(0, ncol = length(ages), nrow =  length(ages))
M_agemin  = matrix(0, ncol = length(ages), nrow =  length(ages))
ty = type[i]
s = sexe[i]
# Calcul SSW reversion une seule fois.
ssw_survivor = compute_ssw_survivor(i, 55, ageliq_conjoint = 60)
# Boucle age d'evaluation
for (ag1 in 1:length(ages))
{
t1 = t_naiss[i]  + ages[ag1]
Leg <- t1
t = t1
UseLeg(Leg = t1, g = t_naiss[i])
# Leg revalo
if (t<93){tx_rev = 0.01}
else {tx_rev = 0.00}
# Boucle age de depart en retraite
for (ag2 in ag1:min((ag1+1),length(ages)))
{
#ag2 = ag1
t2 = t_naiss[i]  + ages[ag2]
if (AgeMin(i,t2))
{
M_agemin[ag1, ag2] = 1
Liq2(i,t2)
M_pension[ag1, ag2] = pension[i]
M_pension_rg[ag1, ag2] = pension_rg[i]
M_sam[ag1, ag2] = sam_rg
M_prorat[ag1, ag2] = prorat_rg
M_taux[ag1, ag2] = taux_rg
M_TR[ag1, ag2] = pension[i]/salaire[i, t2]
M_ssw[ag1, ag2] = SSW(age_eval = ages[ag1], age_ret = ages[ag2],
p = M_pension[ag1, ag2],
tx_rev = tx_rev, s = s, ty = ty)
M_ssw_rev[ag1, ag2] = M_ssw[ag1, ag2] +
}
else
{
j = 1
M_agemin[ag1, ag2] = 0
Clone(i, j)
statut[j, t2:200] = 0; salaire[j, t2:200] = 0
tliq = ceiling(min(AgeMinRG, AgeMinFP) + t_naiss[i])
Liq2(j,tliq)
M_pension[ag1, ag2] = pension[j]
M_sam[ag1, ag2] = sam_rg
M_prorat[ag1, ag2] = prorat_rg
M_taux[ag1, ag2] = taux_rg
M_pension_rg[ag1, ag2] = pension_rg[j]
M_TR[ag1, ag2] = pension[j]/salaire[j, (t2-1)]
M_ssw[ag1, ag2] = SSW(age_eval = ages[ag1], age_ret = floor(min(AgeMinRG, AgeMinFP)),
p = M_pension[ag1, ag2],
tx_rev = tx_rev, s = s, ty = ty)
}
#print(c(ages[ag1], ages[ag2], "taux_rg",taux_rg,"sam",sam_rg, "prorat",prorat_rg, "taux surcote", tx_sur_rg))
#print(c("pension", M_pension_rg[ag1, ag2], "pension calc", taux_rg*sam_rg*prorat_rg))
} # fin boucle sur l'Ã¢ge de dÃ©part en retraite
# Sorties
penliq[i, ag1] =    M_pension[ag1, ag1]
penliq_rg[i, ag1] =    M_pension_rg[ag1, ag1]
sa_rg[i, ag1] =    M_sam[ag1, ag1]
tauxliq_rg[i, ag1] =    M_taux[ag1, ag1]
pro_rg[i, ag1] = M_prorat[ag1, ag1]
trliq[i, ag1] = M_TR[ag1, ag1]
agemin[i, ag1] = M_agemin[ag1, ag1]
ssw[i, ag1] =    M_ssw[ag1, ag1]
if (ag1<length(ages))
{
# accrual[i, ag1] = M_ssw[ag1, (ag1+1)] - M_ssw[ag1, ag1]
accrual[i, ag1] = M_ssw[ag1, (ag1+1)]*Prix[t1]/Prix[t1+1] - M_ssw[ag1, ag1]
accrual_rev[i, ag1] = M_ssw_rev[ag1, (ag1+1)]*Prix[t1]/Prix[t1+1] - M_ssw_rev[ag1, ag1]
accrual_rel[i, ag1] = accrual[i, ag1]  /M_ssw[ag1, ag1]
taxrate[i, ag1]  = -accrual[i, ag1]/salaire[i, (t_naiss[i] + ages[ag1])]
taxrate_rev[i, ag1]  = -accrual_rev[i, ag1]/salaire[i, (t_naiss[i] + ages[ag1])]
delta_pliq[i, ag1]     <- (M_pension[ag1, (ag1+1)] - M_pension[ag1, ag1])/M_pension[ag1, (ag1+1)]
delta_pliq_rg[i, ag1]  <- (M_pension_rg[ag1, (ag1+1)] - M_pension_rg[ag1, ag1])/M_pension_rg[ag1, (ag1+1)]
delta_sam[i, ag1]      <- (M_sam[ag1, (ag1+1)] - M_sam[ag1, ag1])/M_sam[ag1, (ag1+1)]
delta_prorat[i, ag1]   <- (M_prorat[ag1, (ag1+1)] - M_prorat[ag1, ag1])/M_prorat[ag1, (ag1+1)]
delta_taux[i, ag1]     <- (M_taux[ag1, (ag1+1)] - M_taux[ag1, ag1])/M_taux[ag1, (ag1+1)]
}
} # fin boucle sur l'age d'evaluation
}# fin boucle sur les individus
