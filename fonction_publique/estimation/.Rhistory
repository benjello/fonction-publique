}
data_fr = data_all[, c("age", "year", "all_norm", "women_norm", "men_norm")]
names(data_fr) = c("age", "year", "all", "women", "men")
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
##  I.2 Load NBER profiles (without France so far) ##
# Loading profile from UK, Ger and It
data_men = read.csv(file = paste0(chemin_profils, "us_de_it_men.csv"), sep = ";")
data_women = read.csv(file = paste0(chemin_profils, "us_de_it_women.csv"), sep = ";")
data_us_de_it = cbind(data_men, data_women[, -1])
var = c("women1", "women2", "women3", "men1", "men2", "men3")
data_fr_merge = data_fr[which(data_fr$year == 2010), c("age", var)]
names(data_fr_merge) = c("age", paste0(var, "_fr"))
data_aggr = merge(data_us_de_it, data_fr_merge,
by = "age", all.x = T)
# Modif (numeric for It, fill na for F)
var_it = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_it")
for (v in var_it){data_aggr[, v] = as.numeric(as.character(data_aggr[, v])) }
var_fr = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_fr")
for (v in var_fr){data_aggr[which(data_aggr$age>= age_max), v] = na.locf(data_aggr[which(data_aggr$age>= age_max), v])}
data_aggr$women1_mean = rowMeans(data_aggr[, paste0("women1", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr$women2_mean = rowMeans(data_aggr[, paste0("women2", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr$women3_mean = rowMeans(data_aggr[, paste0("women3", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr$men1_mean   = rowMeans(data_aggr[, paste0("men1", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr$men2_mean   = rowMeans(data_aggr[, paste0("men2", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr$men3_mean   = rowMeans(data_aggr[, paste0("men3", c("_fr","_us", "_it","_ger")) ], na.rm = T)
data_aggr = data_aggr[which(data_aggr$age > 15 & data_aggr$age < 70 ), ]
##  I.2 Load NBER profiles (without France so far) ##
# Loading profile from UK, Ger and It
data_men = read.csv(file = paste0(chemin_profils, "us_de_it_men.csv"), sep = ";")
data_women = read.csv(file = paste0(chemin_profils, "us_de_it_women.csv"), sep = ";")
data_us_de_it = cbind(data_men, data_women[, -1])
var = c("women1", "women2", "women3", "men1", "men2", "men3")
data_fr_merge = data_fr[which(data_fr$year == 2010), c("age", var)]
names(data_fr_merge) = c("age", paste0(var, "_fr"))
data_aggr = merge(data_us_de_it, data_fr_merge,
by = "age", all.x = T)
# Modif (numeric for It, fill na for F)
var_it = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_it")
for (v in var_it){data_aggr[, v] = as.numeric(as.character(data_aggr[, v])) }
var_fr = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_fr")
for (v in var_fr){data_aggr[which(data_aggr$age>= age_max), v] = na.locf(data_aggr[which(data_aggr$age>= age_max), v])}
data_aggr$women1_mean = rowMeans(data_aggr[, paste0("women1", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women2_mean = rowMeans(data_aggr[, paste0("women2", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women3_mean = rowMeans(data_aggr[, paste0("women3", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men1_mean   = rowMeans(data_aggr[, paste0("men1",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men2_mean   = rowMeans(data_aggr[, paste0("men2",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men3_mean   = rowMeans(data_aggr[, paste0("men3",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr = data_aggr[which(data_aggr$age > 15 & data_aggr$age < 70 ), ]
names(data_aggr)
data_aggr_merge = data_aggr[, c( "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data = merge(data_fr, data_aggr_merge, by = c("age", "year")), all.x = T)
data = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
names(data_fr)
names(data_aggr)
names(data_aggr_merge)
data_aggr_merge = data_aggr[, c("age", "year", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
data = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
View(data)
data_fr
#### Load profiles: charge les profils de salaire estimés sur les DADS et les met au format pour le calcul des incentives:
# I. Chargement et modification des données
#Compléter années et ages manquant.
#Normalisation par rapport au salaire médians
# II.  Sorties
# III. Sauvegarde au format des bios destines (cf. Bios.R)
##  0. Initialisation ####
# Chemin
rm(list = ls()); gc()
library(zoo)
place = 'ipp'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/data/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
##  I. Data generation ####
##  I.1 Load DADS profiles ##
all_years = seq(1980, 2010, 1)
missing_years = c(seq(1981, 1986,1), seq(1990, 1993,1))
observed_year = setdiff(all_years, missing_years)
age =  seq(16, 70, 1)
all_age = as.data.frame(age)
age_max = 57
list_var = c("all", "women", "men")
# Loop on years: Loading csv + interpoltating missing ages + extrapolating early ages (linear from 21:23 trend)
for (y in observed_year)
{
filename = paste0(chemin_profils, y, ".csv")
data = read.csv(file = filename, sep = ";")
data = merge(data, all_age, by = "age", all.y = T)
list_var2 = c("age", list_var)
data = data[, list_var2]
# Interpolation missing age & extrapolation before 21 & after age_max
for (var in list_var)
{
# Missing ages
data[, var] = na.approx(data[,var] , data[, "age"], na.rm = FALSE)
# Fix after age_max
data[which(data$age >  age_max), var] = NA
data[which(data$age >= age_max), var] = na.locf(data[which(data$age >= age_max), var])
# Linear retropolation before 21
linear_fit = lm(data[which(data$age >= 21 & data$age <= 23),var] ~ data[which(data$age >= 21 & data$age <= 23), "age"])
data[, var] = ifelse(is.na(data[,var]),
linear_fit$coefficients[[1]] + linear_fit$coefficients[[2]]*data[,"age"],
data[,var])
}
data$year = y
if (y == observed_year[1]){data_all = data}
if (y >  observed_year[1]){data_all = rbind(data_all, data)}
}
# Loop on age: Interpolating missing years & normalisation at 50
missing = data.frame(age = rep(age, length(missing_years)), year = rep(missing_years, each = length(age)))
missing[, list_var] = NA
data_all = rbind(data_all, missing)
data_all = data_all[ order( data_all$age, data_all$year), ]
#data_all = data_all[which(data_all$age >= 21 & data_all$age <= age_max), ]
age =  seq(16, 70, 1)
for (var in list_var)
{
for (a in 1:length(age))
{
selection = which(data_all$age == age[a])
data_all[selection, var] = na.approx(data_all[selection,var] , data_all[selection, "year"], na.rm = FALSE)
}
for (y in 1:length(all_years))
{
var2 = paste0(var, "_norm")
ref = data_all[which(data_all$year == all_years[y] & data_all$age == 50), var]
data_all[which(data_all$year == all_years[y]), var2] = data_all[data_all$year == all_years[y] , var]/ref
}
}
data_fr = data_all[, c("age", "year", "all_norm", "women_norm", "men_norm")]
names(data_fr) = c("age", "year", "all", "women", "men")
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
data_fr
data_fr[, v]
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
v = paste0(v, s)
data_fr[, v] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
#### Load profiles: charge les profils de salaire estimés sur les DADS et les met au format pour le calcul des incentives:
# I. Chargement et modification des données
#Compléter années et ages manquant.
#Normalisation par rapport au salaire médians
# II.  Sorties
# III. Sauvegarde au format des bios destines (cf. Bios.R)
##  0. Initialisation ####
# Chemin
rm(list = ls()); gc()
library(zoo)
place = 'ipp'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/data/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
##  I. Data generation ####
##  I.1 Load DADS profiles ##
all_years = seq(1980, 2010, 1)
missing_years = c(seq(1981, 1986,1), seq(1990, 1993,1))
observed_year = setdiff(all_years, missing_years)
age =  seq(16, 70, 1)
all_age = as.data.frame(age)
age_max = 57
list_var = c("all", "women", "men")
# Loop on years: Loading csv + interpoltating missing ages + extrapolating early ages (linear from 21:23 trend)
for (y in observed_year)
{
filename = paste0(chemin_profils, y, ".csv")
data = read.csv(file = filename, sep = ";")
data = merge(data, all_age, by = "age", all.y = T)
list_var2 = c("age", list_var)
data = data[, list_var2]
# Interpolation missing age & extrapolation before 21 & after age_max
for (var in list_var)
{
# Missing ages
data[, var] = na.approx(data[,var] , data[, "age"], na.rm = FALSE)
# Fix after age_max
data[which(data$age >  age_max), var] = NA
data[which(data$age >= age_max), var] = na.locf(data[which(data$age >= age_max), var])
# Linear retropolation before 21
linear_fit = lm(data[which(data$age >= 21 & data$age <= 23),var] ~ data[which(data$age >= 21 & data$age <= 23), "age"])
data[, var] = ifelse(is.na(data[,var]),
linear_fit$coefficients[[1]] + linear_fit$coefficients[[2]]*data[,"age"],
data[,var])
}
data$year = y
if (y == observed_year[1]){data_all = data}
if (y >  observed_year[1]){data_all = rbind(data_all, data)}
}
# Loop on age: Interpolating missing years & normalisation at 50
missing = data.frame(age = rep(age, length(missing_years)), year = rep(missing_years, each = length(age)))
missing[, list_var] = NA
data_all = rbind(data_all, missing)
data_all = data_all[ order( data_all$age, data_all$year), ]
#data_all = data_all[which(data_all$age >= 21 & data_all$age <= age_max), ]
age =  seq(16, 70, 1)
for (var in list_var)
{
for (a in 1:length(age))
{
selection = which(data_all$age == age[a])
data_all[selection, var] = na.approx(data_all[selection,var] , data_all[selection, "year"], na.rm = FALSE)
}
for (y in 1:length(all_years))
{
var2 = paste0(var, "_norm")
ref = data_all[which(data_all$year == all_years[y] & data_all$age == 50), var]
data_all[which(data_all$year == all_years[y]), var2] = data_all[data_all$year == all_years[y] , var]/ref
}
}
data_fr = data_all[, c("age", "year", "all_norm", "women_norm", "men_norm")]
names(data_fr) = c("age", "year", "all", "women", "men")
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
v = paste0(v, s)
data_fr[, v] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
v
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
data_fr[, v]
data_fr[, paste0(v, s)]
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
data_fr
data_fr[, paste0(v, s)]
data_fr[which(data_fr$age < 25), paste0(v, s)]
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
paste0(v, s)
data_fr[, paste0(v, s)]
View(data_fr)
length(unique(data_fr$year))
add = data[rep(seq_len(nrow(data)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data))
ref = data
add = data[rep(seq_len(nrow(data)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data))
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
##  0. Initialisation ####
# Chemin
rm(list = ls()); gc()
library(zoo)
place = 'ipp'
if (place == 'ipp')
{
cheminsource   <-  "C:/Users/s.rabate/Dropbox/NBER/"
chemin_macro   <-  "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_donnee  <- "C:/Users/s.rabate/Dropbox/NBER/data/"
chemin_profils <- "C:/Users/s.rabate/Dropbox/NBER/Profils/profils/"
chemin_graph   <- "C:/Users/s.rabate/Dropbox/NBER/17-11-Munich/Slides/Figures/"
chemin_table   <- "C:/Users/s.rabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
if (place == 'mac')
{
cheminsource <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/"
chemin_donnee  <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/data/"
chemin_graph   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Figures/"
chemin_table   <- "/Users/simonrabate/Dropbox/NBER/17-04-Venise/Slides/Tables/"
}
##  I. Data generation ####
##  I.1 Load DADS profiles ##
all_years = seq(1980, 2010, 1)
missing_years = c(seq(1981, 1986,1), seq(1990, 1993,1))
observed_year = setdiff(all_years, missing_years)
age =  seq(16, 70, 1)
all_age = as.data.frame(age)
age_max = 57
list_var = c("all", "women", "men")
# Loop on years: Loading csv + interpoltating missing ages + extrapolating early ages (linear from 21:23 trend)
for (y in observed_year)
{
filename = paste0(chemin_profils, y, ".csv")
data = read.csv(file = filename, sep = ";")
data = merge(data, all_age, by = "age", all.y = T)
list_var2 = c("age", list_var)
data = data[, list_var2]
# Interpolation missing age & extrapolation before 21 & after age_max
for (var in list_var)
{
# Missing ages
data[, var] = na.approx(data[,var] , data[, "age"], na.rm = FALSE)
# Fix after age_max
data[which(data$age >  age_max), var] = NA
data[which(data$age >= age_max), var] = na.locf(data[which(data$age >= age_max), var])
# Linear retropolation before 21
linear_fit = lm(data[which(data$age >= 21 & data$age <= 23),var] ~ data[which(data$age >= 21 & data$age <= 23), "age"])
data[, var] = ifelse(is.na(data[,var]),
linear_fit$coefficients[[1]] + linear_fit$coefficients[[2]]*data[,"age"],
data[,var])
}
data$year = y
if (y == observed_year[1]){data_all = data}
if (y >  observed_year[1]){data_all = rbind(data_all, data)}
}
# Loop on age: Interpolating missing years & normalisation at 50
missing = data.frame(age = rep(age, length(missing_years)), year = rep(missing_years, each = length(age)))
missing[, list_var] = NA
data_all = rbind(data_all, missing)
data_all = data_all[ order( data_all$age, data_all$year), ]
#data_all = data_all[which(data_all$age >= 21 & data_all$age <= age_max), ]
age =  seq(16, 70, 1)
for (var in list_var)
{
for (a in 1:length(age))
{
selection = which(data_all$age == age[a])
data_all[selection, var] = na.approx(data_all[selection,var] , data_all[selection, "year"], na.rm = FALSE)
}
for (y in 1:length(all_years))
{
var2 = paste0(var, "_norm")
ref = data_all[which(data_all$year == all_years[y] & data_all$age == 50), var]
data_all[which(data_all$year == all_years[y]), var2] = data_all[data_all$year == all_years[y] , var]/ref
}
}
data_fr = data_all[, c("age", "year", "all_norm", "women_norm", "men_norm")]
names(data_fr) = c("age", "year", "all", "women", "men")
### Creation of skill group based only on year of entering LF
for (v in c("all", "women", "men"))
{
for (s in c(1, 2, 3))
{
data_fr[, paste0(v, s)] =   data_fr[, v]
if (s == 2){data_fr[which(data_fr$age < 20), paste0(v, s)] = NA}
if (s == 3){data_fr[which(data_fr$age < 25), paste0(v, s)] = NA}
}
}
##  I.2 Load NBER profiles (without France so far) ##
# Loading profile from UK, Ger and It
data_men = read.csv(file = paste0(chemin_profils, "us_de_it_men.csv"), sep = ";")
data_women = read.csv(file = paste0(chemin_profils, "us_de_it_women.csv"), sep = ";")
data_us_de_it = cbind(data_men, data_women[, -1])
var = c("women1", "women2", "women3", "men1", "men2", "men3")
data_fr_merge = data_fr[which(data_fr$year == 2010), c("age", var)]
names(data_fr_merge) = c("age", paste0(var, "_fr"))
data_aggr = merge(data_us_de_it, data_fr_merge,
by = "age", all.x = T)
# Modif (numeric for It, fill na for F)
var_it = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_it")
for (v in var_it){data_aggr[, v] = as.numeric(as.character(data_aggr[, v])) }
var_fr = paste0(c("women1", "women2", "women3", "men1", "men2", "men3"), "_fr")
for (v in var_fr){data_aggr[which(data_aggr$age>= age_max), v] = na.locf(data_aggr[which(data_aggr$age>= age_max), v])}
data_aggr$women1_mean = rowMeans(data_aggr[, paste0("women1", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women2_mean = rowMeans(data_aggr[, paste0("women2", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$women3_mean = rowMeans(data_aggr[, paste0("women3", c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men1_mean   = rowMeans(data_aggr[, paste0("men1",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men2_mean   = rowMeans(data_aggr[, paste0("men2",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr$men3_mean   = rowMeans(data_aggr[, paste0("men3",   c("_us", "_it","_ger")) ], na.rm = T)
data_aggr = data_aggr[which(data_aggr$age > 15 & data_aggr$age < 70 ), ]
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
View(data_aggr_merge)
data1 = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
data2 = cbind(data_fr, data_aggr_merge)
unique(data_fr^$age)
unique(data_fr$age)
unique(data_aggr$age)
data_fr = data_fr[which(data_fr$age < 70),]
### Adding aggregated profile of 2010 to French profil and replicate until 1980
data_aggr_merge = data_aggr[, c("age", "women1_fr", "women2_fr", "women3_fr", "men1_fr", "men2_fr", "men3_fr",
"women1_mean", "women2_mean", "women3_mean", "men1_mean",  "men2_mean", "men3_mean"  )]
data_aggr_merge$year = 2010
add = data_aggr_merge[rep(seq_len(nrow(data_aggr_merge)), 30), ]
add$year = rep(seq(1980, 2009), each = nrow(data_aggr_merge))
data_aggr_merge = rbind(data_aggr_merge, add)
data1 = merge(data_fr, data_aggr_merge, by = c("age", "year"), all.x = T)
data2 = cbind(data_fr, data_aggr_merge)
data1 = data1[order(data1$year, data1$age), ]
data2 = data1[order(data2$year, data2$age), ]
data2[,3]-data2[,4]
data1 = data1[order(data1$year, data1$age), ]
data2 = data2[order(data2$year, data2$age), ]
data1[,3]-data2[,3]
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
simul_path  = "M:/CNRACL/simulation/results/"
python_file_path = 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "Q:/CNRACL/Note CNRACL/Figures/"
}
setwd(wd)
if (user == "temp")
{
wd =  'C:/Users/s.rabate/Desktop/temp/estimation/'
data_path = "C:/Users/s.rabate/Desktop/temp/data/"
save_model_path = "C:/Users/s.rabate/Desktop/temp/predictions/"
simul_path  = "C:/Users/s.rabate/Desktop/temp/simulation/results/"
python_file_path = 'C:/Users/s.rabate/Desktop/temp/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "C:/Users/s.rabate/Desktop/temp/Note CNRACL/Figures/"
tab_path = "C:/Users/s.rabate/Desktop/temp/Note CNRACL/Figures/"
}
setwd(wd)
##### 0. Iniatialisation #####
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, "/filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
names(data_max)
table(data_max$quarter_entry_echelon)
table(data_max$quarter_entry_echelon)/length(data_max$quarter_entry_echelon)
