command =  paste0('simulation',  args)
shell(command)
}
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
save_data_simul_path = "M:/CNRACL/simulation/"
python_file_path = 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "Q:/CNRACL/Note CNRACL/Figures/"
}
setwd(wd)
source(paste0(wd, "0_Outils_CNRACL.R"))
load(paste0(save_model_path, "mlog.rda"))
m = 1
(annee == 2011){data_sim = generate_data_sim(data_path, use = "min")}
annee = 2011
if (annee == 2011){data_sim = generate_data_sim(data_path, use = "min")}
generate_data_sim <- function(data_path, path_utils, use = "min")
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data_obs = datasets[[1]]}
if (use == "min"){data_obs = datasets[[2]]}
data_obs  =  create_variables(data_obs)
data_sim =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
list_var = c("ident", "annee",  "sexe", "generation_group2", "c_cir_2011",
"I_bothC", "I_bothE", "duration", "duration2", "duration3",
"echelon", "time", "anciennete_echelon", "ib")
return(data_sim[, list_var])
}
generate_data_output <- function(data_path)
{
filename = paste0(data_path, dataname)
data_long = read.csv(filename)
list_var = c("ident", "annee", "c_cir_2011", "grade","ib")
output = data_long[which(data_long$annee <= 2015), list_var]
return(output[, list_var])
}
increment_data_sim <- function(data_sim, data_results)
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data_obs = datasets[[1]]}
if (use == "min"){data_obs = datasets[[2]]}
data_obs  =  create_variables(data_obs)
data_sim =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
list_var = c("ident", "annee",  "sexe", "generation_group2", "c_cir_2011",
"I_bothC", "I_bothE", "duration", "duration2", "duration3",
"echelon", "time", "anciennete_echelon", "ib")
return(data_sim[, list_var])
}
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
launch_prediction_Py <- function(annee, python_file_path, modelname)
{
command ="python"
path2script= paste0(python_file_path, "simulation.py")
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0("-i ", input_name)
output_arg = paste0("-o ", output_name)
args = c(annee, input_arg, output_arg)
# Add path to script as first arg
allArgs = c(path2script, args)
system2(command, args = allArgs)
}
launch_prediction_Py2 <- function(annee, modelname, debug = F)
{
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
if (debug){d = " -d"}
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
data_sim = generate_data_sim(data_path, use = "min")
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
launch_prediction_Py2 <- function(annee, modelname, debug = F)
{
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
d = ifelse(debug, " -d", "")
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
}
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
save_data_simul_path = "M:/CNRACL/simulation/results/"
debug = F
command ="python"
path2script= paste0(python_file_path, "simulation.py")
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0("-i ", input_name)
output_arg = paste0("-o ", output_name)
args = c(annee, input_arg, output_arg)
# Add path to script as first arg
allArgs = c(path2script, args)
allArgs
system2(command, args = allArgs)
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
d = ifelse(debug, " -d", "")
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
args
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
launch_prediction_Py2
launch_prediction_Py2(annee, modelname)
save_data_simul_path
launch_prediction_Py2(annee, modelname)
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul_path  = "M:/CNRACL/simulation/results/"
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
View(simul)
View(simul)
table(simul$situation)
table(simul$ib)
table(simul$echelon)
summary(data_sim$time)
simul[1,]
table(simul$grade[which(simul$situation == "exit_oth")])
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
simul_path  = "M:/CNRACL/simulation/results/"
python_file_path = 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "Q:/CNRACL/Note CNRACL/Figures/"
}
setwd(wd)
source(paste0(wd, "0_Outils_CNRACL.R"))
load(paste0(save_model_path, "mlog.rda"))
generate_data_sim <- function(data_path, path_utils, use = "min")
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
return(data_sim)
}
generate_data_output <- function(data_path)
{
filename = paste0(data_path, dataname)
data_long = read.csv(filename)
list_var = c("ident", "annee", "c_cir_2011", "grade","ib")
output = data_long[which(data_long$annee <= 2015), list_var]
return(output[, list_var])
}
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
launch_prediction_Py <- function(annee, modelname, debug = F)
{
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
d = ifelse(debug, " -d", "")
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
}
load_and_clean_Py_prediction <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
return(simul)
}
load_and_clean_Py_prediction <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
return(simul)
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
if (annee == 2011){data_sim = generate_data_sim(data_path, use = "min")}
annee = 2011
if (annee == 2011){data_sim = generate_data_sim(data_path, use = "min")}
annee
data_sim = generate_data_sim(data_path, use = "min")
data_path
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
use = "min"
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
names(data)
names(datasets[[1]])
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
data = datasets[[1]]
data$generation_group  <-cut(data$generation, c(1960,1965,1970,1975,1980,1985,1990), labels=c(1:6))
data$generation_group2 <-cut(data$generation, c(1960,1969,1979,1989), labels = c(1:3))
data$age_an_aff    = data$an_aff - data$generation
data$dist_an_aff = data$annee - data$an_aff +1
grade_modif = which(data$c_cir_2011 == "TTH1" | data$c_cir_2011 == "TTH2")
data$time2 = data$time
data$time2[grade_modif] = data$dist_an_aff[grade_modif]
data$I_echC     = ifelse(data$echelon >= data$E_choice, 1, 0)
data$I_gradeC   = ifelse(data$time2 >= data$D_choice, 1, 0)
data$I_gradeC   = ifelse(data$time2 >= data$D_choice, 1, 0)
data$I_bothC    =  ifelse(data$I_echC ==1 &  data$I_gradeC == 1, 1, 0)
data$I_echE     = ifelse(data$echelon >= data$E_exam & data$c_cir_2011 == "TTH1", 1, 0)
data$I_gradeE   = ifelse(data$time2 >= data$D_exam & data$c_cir_2011 == "TTH1", 1, 0)
data$I_bothE    = ifelse(data$I_echE ==1 &  data$I_gradeE == 1, 1, 0)
data$c_cir = factor(data$c_cir)
data$duration = data$time
data$duration2 = data$time^2
data$duration3 = data$time^3
data$duration_aft  = data$time*data$I_bothC
data$duration_aft2 = data$time^2*data$I_bothC
data$duration_bef  = data$time*(1-data$I_bothC)
data$duration_bef2 = data$time^2*(1-data$I_bothC)
data$generation_group = factor(data$generation_group)
data$c_cir_2011 = factor(data$c_cir_2011)
# Unique threshold (first reached)
grade_modif_bis = which(data$c_cir_2011 == "TTH1")
data$I_unique_threshold = data$I_bothC
data$I_unique_threshold[grade_modif_bis] = data$I_bothE[grade_modif_bis]
data$duration_aft_unique_threshold  = data$time*data$I_unique_threshold
data$duration_aft_unique_threshold2 = data$time^2*data$I_unique_threshold
data$duration_bef_unique_threshold  = data$time*(1-data$I_unique_threshold)
data$duration_bef_unique_threshold2 = data$time^2*(1-data$I_unique_threshold)
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
create_variables
data$generation_group  <-cut(data$generation, c(1960,1965,1970,1975,1980,1985,1990), labels=c(1:6))
data$generation_group2 <-cut(data$generation, c(1960,1969,1979,1989), labels = c(1:3))
data$age_an_aff    = data$an_aff - data$generation
data$dist_an_aff = data$annee - data$an_aff +1
grade_modif = which(data$c_cir_2011 == "TTH1" | data$c_cir_2011 == "TTH2")
data$time2 = data$time
data$time2[grade_modif] = data$dist_an_aff[grade_modif]
data$I_echC     = ifelse(data$echelon >= data$E_choice, 1, 0)
data$I_gradeC   = ifelse(data$time2 >= data$D_choice, 1, 0)
data$I_gradeC   = ifelse(data$time2 >= data$D_choice, 1, 0)
data$I_bothC    =  ifelse(data$I_echC ==1 &  data$I_gradeC == 1, 1, 0)
data$I_echE     = ifelse(data$echelon >= data$E_exam & data$c_cir_2011 == "TTH1", 1, 0)
data$I_gradeE   = ifelse(data$time2 >= data$D_exam & data$c_cir_2011 == "TTH1", 1, 0)
data$I_bothE    = ifelse(data$I_echE ==1 &  data$I_gradeE == 1, 1, 0)
data$c_cir = factor(data$c_cir)
data$duration = data$time
data$duration2 = data$time^2
data$duration3 = data$time^3
data$duration_aft  = data$time*data$I_bothC
data$duration_aft2 = data$time^2*data$I_bothC
data$duration_bef  = data$time*(1-data$I_bothC)
data$duration_bef2 = data$time^2*(1-data$I_bothC)
data$generation_group = factor(data$generation_group)
data$c_cir_2011 = factor(data$c_cir_2011)
# Unique threshold (first reached)
grade_modif_bis = which(data$c_cir_2011 == "TTH1")
data$I_unique_threshold = data$I_bothC
data$I_unique_threshold[grade_modif_bis] = data$I_bothE[grade_modif_bis]
data$duration_aft_unique_threshold  = data$time*data$I_unique_threshold
data$duration_aft_unique_threshold2 = data$time^2*data$I_unique_threshold
data$duration_bef_unique_threshold  = data$time*(1-data$I_unique_threshold)
data$duration_bef_unique_threshold2 = data$time^2*(1-data$I_unique_threshold)
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff",
"E_exam", "E_choice", "D_exam", "D_choice",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
generate_data_sim <- function(data_path, use = "min")
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff",
"E_exam", "E_choice", "D_exam", "D_choice",
"time", "anciennete_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
return(data_sim)
}
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
generate_data_output <- function(data_path)
{
filename = paste0(data_path, dataname)
data_long = read.csv(filename)
list_var = c("ident", "annee", "c_cir_2011", "grade","ib")
output = data_long[which(data_long$annee <= 2015), list_var]
return(output[, list_var])
}
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
launch_prediction_Py <- function(annee, modelname, debug = F)
{
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
d = ifelse(debug, " -d", "")
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
}
load_and_clean_Py_prediction <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
return(simul)
}
load_and_clean_Py_prediction <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
return(simul)
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
m
m = 1
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
launch_prediction_Py2(annee, modelname)
launch_prediction_Py(annee, modelname)
load_simul_py <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
return(simul)
}
simul_py = load_simul_py(annee, modelname)
names(data_sim)
data_long$c_cir
table(data_sim$time)
View(simul_py)
View(simul_py)
names(pred)
generate_data_sim <- function(data_path, use = "min")
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff",
"E_exam", "E_choice", "D_exam", "D_choice",
"time", "anciennete_dans_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011),
list_var ]
data_sim  =  create_variables(data)
return(data_sim)
}
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "anciennete_dans_echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
if (annee == 2011){data_sim = generate_data_sim(data_path, use = "min")}
model      = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
# Prediction of next_situation from estimated model
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
# Prediction of next_ib using simulation.py
launch_prediction_Py(annee, modelname)
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "anciennete_dans_echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
save_prediction_R(data = pred, annee, save_data_simul_path, modelname)
save_prediction_R(data = pred, annee, simul_path, modelname)
launch_prediction_Py(annee, modelname)
# Load and save results
simul_py = load_simul_py(annee, modelname)
save_results_simul(output, simul_py, modelname)
print(paste0("Il y a ",length(data_sim$ident)," individus dans la base_sim et ", length(data_sim$ident)," dans simul"))
simul_py[1,-1]
simul_py[1,]
simul_py[1,-simul_py$ident]
simul_py[1,-(simul_py$ident)]
simul_py[1,~(simul_py$ident)]
names(simul_py)
table(data_sim$anciennete_dans_echelon, useNA = "always")
table(data_sim$c_cir_2011[which(is.na(data_sim$anciennete_dans_echelon))])
table(data_sim$echelon[which(is.na(data_sim$anciennete_dans_echelon))])
table(data_sim$time[which(is.na(data_sim$anciennete_dans_echelon))])
median(data_sim$echelon)
median(data_sim$anciennete_dans_echelon)
median(data_sim$anciennete_dans_echelon, na.rm = T)
data_sim$next_situation
