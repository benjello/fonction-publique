prob     <- predict(model, data_predict_MNL ,type = "response")
data_AT$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
# Correct 1: individuals in TTH4 cannot go in 'exit_next'
to_change = which(data_AT$grade == "TTH4" & data_AT$yhat == "exit_next")
rescale_p_no_exit = prob[,1]/(prob[,1]+prob[,3])
no_exit_hat   <- as.numeric(mapply(tirage, rescale_p_no_exit))
data_AT$yhat[to_change] <- ifelse(no_exit_hat[to_change]  == 1, "no_exit", "exit_oth")
# Correct 2: individuals in TTM1 or TTM2 stay in their grade.
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
# Prédiction du changement de grade pour le modèle par grade
predict_next_year_byG <- function(data_sim, list_model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_sim$grade <- as.character(data_sim$grade)
data_sim$yhat = ""
data_predict = mlogit.data(data_sim, shape = "wide", choice = "next_year")
data_predict = data_predict[order(data_predict$ident, data_predict$alt),]
# Prediction by grade
n = names(data_sim)
data_merge = as.data.frame(setNames(replicate(length(n),numeric(0), simplify = F), n))
list_grade = c("TTH1","TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
list_id_sim   = which(data_sim$grade == list_grade[g])
list_id_estim = which(data_predict$grade == list_grade[g])
model = list_model[[g]]
if (list_grade[g] != "TTH4")
{
prob     <- predict(model, data_predict[list_id_estim, ], type = "response")
data_sim$yhat[list_id_sim] = mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
}
if (list_grade[g] == "TTH4")
{
prob     <- predict(model, data_sim[list_id_sim, ] ,type = "response")
pred     <- as.numeric(mapply(tirage, prob))
data_sim$yhat[list_id_sim] = ifelse(pred == 1, "exit_oth", "no_exit")
}
}
# No exit quand hors du corps
if (length(unique(data_sim$grade)) > 4)
{
list_hors_corps = which(!is.element(data_sim$grade, list_grade))
data_sim$yhat[list_hors_corps] = "no_exit"
}
data_sim = data_sim[order(data_sim$ident), ]
# Checks
stopifnot(length(which(data_sim$yhat == "")) == 0)
return(data_sim)
}
predict_next_year_seq_m1 <- function(data_sim, m1, m2, modelname)
{
# Prediction for AT grade
data_AT = data_sim[which(is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
prob1     <- predict(m1, data_AT, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(m2, data_AT, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_AT$yhat <- ifelse(pred1 == 1, "exit", "no_exit")
data_AT$yhat[which(pred1 == 1 & pred2 == 1)] <- "exit_next"
data_AT$yhat[which(pred1 == 1 & pred2 == 0)] <- "exit_oth"
# Correct: exit_next to oth when TTH4.
data_AT$yhat[which(data_AT$grade == "TTH4" & data_AT$yhat == "exit_next")] <- "exit_oth"
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
predict_next_year_seq_m2 <- function(data_sim, m1, m2, modelname)
{
# Prediction for AT grade
data_AT = data_sim[which(is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
prob1     <- predict(m1, data_AT, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(m2, data_AT, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_AT$yhat <- ifelse(pred1 == 1, "exit_oth", "no_exit")
data_AT$yhat[which(pred1 == 0 & pred2 == 1)] <- "exit_next"
data_AT$yhat[which(pred1 == 0 & pred2 == 0)] <- "no_exit"
# Correct: exit_next to no_exit when TTH4.
data_AT$yhat[which(data_AT$grade == "TTH4" & data_AT$yhat == "exit_next")] <- "no_exit"
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
increment_data_sim <- function(data_sim, simul_py)
{
# Deleting individuals with pbl
if (length(data_sim$ident) != length(simul_py$ident) | length(which(is.na(simul_py$ib)) >0 )  | length(which(is.na(simul_py$grade)) >0 ))
{
list_pbl_id1 = unique(setdiff(data_sim$ident, simul_py$ident))
print(paste0("Il y a ",length(list_pbl_id1)," présents dans data_sim et absent dans simul"))
list_pbl_id2 = unique(setdiff(simul_py$ident, data_sim$ident))
print(paste0("Il y a ",length(list_pbl_id2)," présents dans simul et absent dans data_sim"))
list_pbl_ib = unique(simul_py$ident[which(is.na(simul_py$ib))])
print(paste0("Il y a ",length(list_pbl_ib)," individus dans la base simul  avec ib = NA"))
list_pbl_grade = unique(simul_py$ident[which(is.na(simul_py$grade) | simul_py$grade == "nan")])
print(paste0("Il y a ",length(list_pbl_grade)," individus dans la simul  avec grade = NA"))
deleted_id = Reduce(union, list(list_pbl_id1, list_pbl_id2, list_pbl_ib, list_pbl_grade))
data_sim = data_sim[which(!is.element(data_sim$ident, deleted_id)), ]
simul_py = simul_py[which(!is.element(simul_py$ident, deleted_id)), ]
print(paste0("Il y a ",length(unique(data_sim$ident))," individus dans la base en ", annee+1))
}
# Merge
list_var_kept1 = c("ident",  "sexe", "generation", "an_aff", "c_cir_2011",
"E_exam", "E_choice", "D_exam", "D_choice", "time")
list_var_kept2 = c("annee", "grade", "echelon", "ib", "anciennete_dans_echelon", "situation")
data_merge = cbind(data_sim[,list_var_kept1], simul_py[, list_var_kept2])
# Increment time
data_merge$time[which(data_merge$situation == "no_exit")] = data_merge$time[which(data_merge$situation == "no_exit")] + 1
data_merge$time[which(data_merge$situation != "no_exit")] = 1
# Recreate variables (duration, thresholds with new time and echelons)
data_merge  =  create_variables(data_merge)
data_merge = data_merge[order(data_merge$ident), ]
return(data_merge)
}
save_results_simul <- function(output, data_sim, modelname)
{
var = c("grade", "anciennete_dans_echelon", "echelon", "ib", "situation", "I_bothC")
new_var = paste0(c("grade", "anciennete_dans_echelon", "echelon", "ib", "situation", "I_bothC"), "_", modelname )
data_sim[, new_var] = data_sim[, var]
add = data_sim[, c("ident", "annee", new_var)]
# Merge
output = rbind(output, add)
output = output[order(output$ident, output$annee),]
return(output)
}
comp_data = output_global[which(output_global$annee <= 2014),]
list_ok = comp_data$ident[which(comp_data$annee == 2013 & comp_data$situation ==comp_data$situation_BG_1)]
comp_data = comp_data[which(is.element(comp_data$ident, list_ok)),]
comp_data$ech_obs = comp_data$echelon
comp_data$ech_sim = comp_data$echelon_BG_1
comp_data$var_ech = comp_data$ech_obs - comp_data$ech_sim
comp_data$ib_obs = comp_data$ib
comp_data$ib_sim = comp_data$ib_BG_1
comp_data$var_ib = comp_data$ib_obs - comp_data$ib_sim
comp2011 = comp_data[comp_data$annee == 2013,]
comp2012 = comp_data[comp_data$annee == 2012,]
comp_data = output_global[which(output_global$annee <= 2014),]
list_ok = comp_data$ident[which(comp_data$annee == 2013 & comp_data$situation ==comp_data$situation_BG_1 & comp_data$grade ==comp_data$grade_BG_1)]
comp_data = comp_data[which(is.element(comp_data$ident, list_ok)),]
comp_data$ech_obs = comp_data$echelon
comp_data$ech_sim = comp_data$echelon_BG_1
comp_data$var_ech = comp_data$ech_obs - comp_data$ech_sim
comp_data$ib_obs = comp_data$ib
comp_data$ib_sim = comp_data$ib_BG_1
comp_data$var_ib = comp_data$ib_obs - comp_data$ib_sim
comp2011 = comp_data[comp_data$annee == 2013,]
comp2012 = comp_data[comp_data$annee == 2012,]
table = matrix(ncol = 5, nrow = 8)
list_grade =  c("All", "TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
if (list_grade[g] == "All")
{
subcomp2011 = comp2011
subcomp2012 = comp2012
}
if (list_grade[g] != "All")
{
subcomp2011 = comp2011[which(comp2011$grade == list_grade[g]),]
subcomp2012 = comp2012[which(comp2011$c_cir_2011 == list_grade[g]),]
}
table[1,g] = mean(subcomp2012$var_ech)
table[2,g] = mean(subcomp2012$var_ib)
table[3,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "no_exit")])
table[4,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "no_exit")])
table[5,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_next")])
table[6,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_next")])
table[7,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_oth")])
table[8,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_oth")])
}
colnames(table) = c("Tous", "TTH1", "TTH2","TTH3", "TTH4")
rownames(table) = c("Ecart d'echelon moyen total", "Ecart d'ib moyen total",
"Ecart d'echelon moyen no exit","Ecart d'ib moyen no exit",
"Ecart d'echelon moyen exit next","Ecart d'ib moyen exit next",
"Ecart d'echelon moyen exit oth","Ecart d'ib moyen exit oth")
table
comp_data = output_global[which(output_global$annee <= 2014),]
list_ok = comp_data$ident[which(comp_data$annee == 2013 & comp_data$situation ==comp_data$situation_BG_1 & comp_data$grade ==comp_data$grade_BG_1)]
comp_data = comp_data[which(is.element(comp_data$ident, list_ok)),]
comp_data$ech_obs = comp_data$echelon
comp_data$ech_sim = comp_data$echelon_BG_1
comp_data$var_ech = comp_data$ech_obs - comp_data$ech_sim
comp_data$ib_obs = comp_data$ib
comp_data$ib_sim = comp_data$ib_BG_1
comp_data$var_ib = comp_data$ib_obs - comp_data$ib_sim
comp2011 = comp_data[comp_data$annee == 2013,]
comp2012 = comp_data[comp_data$annee == 2012,]
table = matrix(ncol = 5, nrow = 8)
list_grade =  c("All", "TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
if (list_grade[g] == "All")
{
subcomp2011 = comp2011
subcomp2012 = comp2012
}
if (list_grade[g] != "All")
{
subcomp2011 = comp2011[which(comp2011$grade == list_grade[g]),]
subcomp2012 = comp2012[which(comp2011$grade == list_grade[g]),]
}
table[1,g] = mean(subcomp2012$var_ech)
table[2,g] = mean(subcomp2012$var_ib)
table[3,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "no_exit")])
table[4,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "no_exit")])
table[5,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_next")])
table[6,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_next")])
table[7,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_oth")])
table[8,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_oth")])
}
colnames(table) = c("Tous", "TTH1", "TTH2","TTH3", "TTH4")
rownames(table) = c("Ecart d'echelon moyen total", "Ecart d'ib moyen total",
"Ecart d'echelon moyen no exit","Ecart d'ib moyen no exit",
"Ecart d'echelon moyen exit next","Ecart d'ib moyen exit next",
"Ecart d'echelon moyen exit oth","Ecart d'ib moyen exit oth")
print(xtable(table,nrow = nrow(table), align = "lccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize",
only.contents=T, include.colnames = T,
file = paste0(fig_path,"diff_ech_ib_sim.tex"))
table
comp_data = output_global[which(output_global$annee <= 2012),]
list_ok = comp_data$ident[which(comp_data$annee == 2011 & comp_data$situation ==comp_data$situation_BG_1)]
comp_data = comp_data[which(is.element(comp_data$ident, list_ok)),]
comp_data$ech_obs = comp_data$echelon
comp_data$ech_sim = comp_data$echelon_BG_1
comp_data$var_ech = comp_data$ech_obs - comp_data$ech_sim
comp_data$ib_obs = comp_data$ib
comp_data$ib_sim = comp_data$ib_BG_1
comp_data$var_ib = comp_data$ib_obs - comp_data$ib_sim
comp2011 = comp_data[comp_data$annee == 2011,]
comp2012 = comp_data[comp_data$annee == 2012,]
table = matrix(ncol = 5, nrow = 8)
list_grade =  c("All", "TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
if (list_grade[g] == "All")
{
subcomp2011 = comp2011
subcomp2012 = comp2012
}
if (list_grade[g] != "All")
{
subcomp2011 = comp2011[which(comp2011$c_cir_2011 == list_grade[g]),]
subcomp2012 = comp2012[which(comp2011$c_cir_2011 == list_grade[g]),]
}
table[1,g] = mean(subcomp2012$var_ech)
table[2,g] = mean(subcomp2012$var_ib)
table[3,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "no_exit")])
table[4,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "no_exit")])
table[5,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_next")])
table[6,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_next")])
table[7,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_oth")])
table[8,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_oth")])
}
colnames(table) = c("Tous", "TTH1", "TTH2","TTH3", "TTH4")
rownames(table) = c("Ecart d'echelon moyen total", "Ecart d'ib moyen total",
"Ecart d'echelon moyen no exit","Ecart d'ib moyen no exit",
"Ecart d'echelon moyen exit next","Ecart d'ib moyen exit next",
"Ecart d'echelon moyen exit oth","Ecart d'ib moyen exit oth")
print(xtable(table,nrow = nrow(table), align = "lccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize",
only.contents=T, include.colnames = T,
file = paste0(fig_path,"diff_ech_ib_sim.tex"))
comp_data = output_global[which(output_global$annee <= 2014),]
list_ok = comp_data$ident[which(comp_data$annee == 2013 & comp_data$situation ==comp_data$situation_BG_1 & comp_data$grade ==comp_data$grade_BG_1)]
comp_data = comp_data[which(is.element(comp_data$ident, list_ok)),]
comp_data$ech_obs = comp_data$echelon
comp_data$ech_sim = comp_data$echelon_BG_1
comp_data$var_ech = comp_data$ech_obs - comp_data$ech_sim
comp_data$ib_obs = comp_data$ib
comp_data$ib_sim = comp_data$ib_BG_1
comp_data$var_ib = comp_data$ib_obs - comp_data$ib_sim
comp2011 = comp_data[comp_data$annee == 2013,]
comp2012 = comp_data[comp_data$annee == 2012,]
table = matrix(ncol = 5, nrow = 8)
list_grade =  c("All", "TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
if (list_grade[g] == "All")
{
subcomp2011 = comp2011
subcomp2012 = comp2012
}
if (list_grade[g] != "All")
{
subcomp2011 = comp2011[which(comp2011$grade == list_grade[g]),]
subcomp2012 = comp2012[which(comp2011$grade == list_grade[g]),]
}
table[1,g] = mean(subcomp2012$var_ech)
table[2,g] = mean(subcomp2012$var_ib)
table[3,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "no_exit")])
table[4,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "no_exit")])
table[5,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_next")])
table[6,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_next")])
table[7,g] = mean(subcomp2012$var_ech[which(subcomp2011$situation == "exit_oth")])
table[8,g] = mean(subcomp2012$var_ib[which(subcomp2011$situation == "exit_oth")])
}
colnames(table) = c("Tous", "TTH1", "TTH2","TTH3", "TTH4")
rownames(table) = c("Ecart d'echelon moyen total", "Ecart d'ib moyen total",
"Ecart d'echelon moyen no exit","Ecart d'ib moyen no exit",
"Ecart d'echelon moyen exit next","Ecart d'ib moyen exit next",
"Ecart d'echelon moyen exit oth","Ecart d'ib moyen exit oth")
table
table_gain_ib = function(data, var_ib, var_situation, var_grade, details = F)
{
data$var_ib = data[, var_ib]
data$var_situation = data[, var_situation]
data$var_grade = data[, var_grade]
data$next_ib = ave(data$var_ib, data$ident, FUN = shift1)
data$gain_ib = data$next_ib - data$var_ib
data$I_gain = ifelse(data$gain_ib >0, 1, 0)
data$gain_ib_pct = 100*(data$gain_ib)/data$var_ib
data = data[which(data$annee < 2015),]
table = numeric(21)
table[1] = mean(data$gain_ib, na.rm = T)
table[2] = median(data$gain_ib_pct, na.rm = T)
table[3] = 100*mean(data$I_gain, na.rm = T)
list_grade = c("TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
list = which(data$c_cir_2011 == list_grade[g])
table[3*g+1] = mean(data$gain_ib[list], na.rm = T)
table[3*g+2] = median(data$gain_ib_pct[list], na.rm = T)
table[3*g+3] = 100*mean(data$I_gain[list], na.rm = T)
}
list = which(data$var_situation == "no_exit")
table[16] = mean(data$gain_ib[list], na.rm = T)
table[17] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_next")
table[18] = mean(data$gain_ib[list], na.rm = T)
table[19] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_oth")
table[20] = mean(data$gain_ib[list], na.rm = T)
table[21] = 100*mean(data$I_gain[list], na.rm = T)
if (details)
{
for (g in 1:length(list_grade))
{
list = which(data$var_situation == "no_exit" & data$grade == list_grade[g])
table[3*(g-1)+22] = mean(data$gain_ib[list], na.rm = T)
list = which(data$var_situation == "exit_next"& data$grade == list_grade[g])
table[3*(g-1)+23]= mean(data$gain_ib[list], na.rm = T)
list = which(data$var_situation == "exit_oth"& data$grade == list_grade[g])
table[3*(g-1)+24]= mean(data$gain_ib[list], na.rm = T)
}
}
return(table)
}
D = T
obs = table_gain_ib(output_global, "ib", "situation","grade",  details = D)
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1"))
{
table = table_gain_ib(data = output_global, var_ib = paste0("ib_", m), , var_grade =  paste0("grade_", m),
var_situation =  paste0("situation_", m), details = D)
assign(paste0("table_gain_", m), table)
}
table = cbind(obs, table_gain_MNL_2, table_gain_MNL_3, table_gain_BG_1, table_gain_MS_1)
colnames(table) = c('Observed',  "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1")
if (D == F)
{
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth"
)
}
if (D == T)
{
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth",
"gain ib moyen no\\_exit TTH1" , "gain ib moyen exit\\_next TTH1", "gain ib moyen exit\\_oth TTH1",
"gain ib moyen no\\_exit TTH2" , "gain ib moyen exit\\_next TTH2", "gain ib moyen exit\\_oth TTH2",
"gain ib moyen no\\_exit TTH3" , "gain ib moyen exit\\_next TTH3", "gain ib moyen exit\\_oth TTH3",
"gain ib moyen no\\_exit TTH4" , "gain ib moyen exit\\_next TTH4", "gain ib moyen exit\\_oth TTH4"
)
lines= c(0, 3, 6, 9, 12, 15, 17, 19, 21, 24, 27, 30, 33)
}
table_gain_ib = function(data, var_ib, var_situation, var_grade, details = F)
{
data$var_ib = data[, var_ib]
data$var_situation = data[, var_situation]
data$var_grade = data[, var_grade]
data$next_ib = ave(data$var_ib, data$ident, FUN = shift1)
data$gain_ib = data$next_ib - data$var_ib
data$I_gain = ifelse(data$gain_ib >0, 1, 0)
data$gain_ib_pct = 100*(data$gain_ib)/data$var_ib
data = data[which(data$annee < 2015),]
table = numeric(21)
table[1] = mean(data$gain_ib, na.rm = T)
table[2] = median(data$gain_ib_pct, na.rm = T)
table[3] = 100*mean(data$I_gain, na.rm = T)
list_grade = c("TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
list = which(data$c_cir_2011 == list_grade[g])
table[3*g+1] = mean(data$gain_ib[list], na.rm = T)
table[3*g+2] = median(data$gain_ib_pct[list], na.rm = T)
table[3*g+3] = 100*mean(data$I_gain[list], na.rm = T)
}
list = which(data$var_situation == "no_exit")
table[16] = mean(data$gain_ib[list], na.rm = T)
table[17] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_next")
table[18] = mean(data$gain_ib[list], na.rm = T)
table[19] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_oth")
table[20] = mean(data$gain_ib[list], na.rm = T)
table[21] = 100*mean(data$I_gain[list], na.rm = T)
if (details)
{
for (g in 1:length(list_grade))
{
list = which(data$var_situation == "no_exit" & data$var_grade == list_grade[g])
table[3*(g-1)+22] = mean(data$gain_ib[list], na.rm = T)
list = which(data$var_situation == "exit_next"& data$var_grade == list_grade[g])
table[3*(g-1)+23]= mean(data$gain_ib[list], na.rm = T)
list = which(data$var_situation == "exit_oth"& data$var_grade == list_grade[g])
table[3*(g-1)+24]= mean(data$gain_ib[list], na.rm = T)
}
}
return(table)
}
D = T
obs = table_gain_ib(output_global, "ib", "situation","grade",  details = D)
D = T
obs = table_gain_ib(output_global, "ib", "situation","grade",  details = D)
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1"))
{
table = table_gain_ib(data = output_global, var_ib = paste0("ib_", m), var_grade =  paste0("grade_", m),
var_situation =  paste0("situation_", m), details = D)
assign(paste0("table_gain_", m), table)
}
table = cbind(obs, table_gain_MNL_2, table_gain_MNL_3, table_gain_BG_1, table_gain_MS_1)
colnames(table) = c('Observed',  "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1")
if (D == F)
{
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth"
)
}
if (D == T)
{
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth",
"gain ib moyen no\\_exit TTH1" , "gain ib moyen exit\\_next TTH1", "gain ib moyen exit\\_oth TTH1",
"gain ib moyen no\\_exit TTH2" , "gain ib moyen exit\\_next TTH2", "gain ib moyen exit\\_oth TTH2",
"gain ib moyen no\\_exit TTH3" , "gain ib moyen exit\\_next TTH3", "gain ib moyen exit\\_oth TTH3",
"gain ib moyen no\\_exit TTH4" , "gain ib moyen exit\\_next TTH4", "gain ib moyen exit\\_oth TTH4"
)
lines= c(0, 3, 6, 9, 12, 15, 17, 19, 21, 24, 27, 30, 33)
}
table
print(xtable(table,nrow = nrow(table), align = "l|c|cccc", caption = "Gains ib",
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = lines,
only.contents=T, include.colnames = T,
file = paste0(fig_path,"gain_ib.tex"))
