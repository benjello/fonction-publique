m3 = extract.mlogit2(mlog3)
m4 = extract.mlogit2(mlog4)
m5 = extract.glm2(mlog5, include.aic =  F, include.bic = F, include.deviance =  F)
model.list <- list(m2, m3, m4, m5)
name.map <- list("exit_next:(intercept)"       = "exit_next: constante",
"exit_next:sexeM"             = "exit_next: Homme",
"exit_next:generation_group22" = "exit_next: Generation 70s",
"exit_next:generation_group23 "= "exit_next: Generation 80s",
"exit_next:I_bothC"            = "exit_next: Conditions choix remplies",
"exit_next:I_bothE"            = "exit_next: Conditions exam remplies",
"exit_oth:(intercept)"        = "exit_oth: constante",
"exit_oth:sexeM"              = "exit_oth: Homme",
"exit_oth:generation_group22" = "exit_oth: Generation 70s",
"exit_oth:generation_group23" = "exit_oth: Generation 80s",
"exit_oth:I_bothC"            = "exit_oth: Conditions choix remplies",
"exit_oth:I_bothE"            = "exit_oth: Conditions exam remplies",
"(intercept)"        = "Constante",
"sexeM"              = "Homme",
"generation_group22" = "Generation 70s",
"generation_group23" = "Generation 80s")
oldnames <- all.varnames.dammit(model.list)
ror <- build.ror(oldnames, name.map)
print(texreg2(model.list,
caption.above=T,
custom.model.names = c("TTH1", "TTH2","TTH3", "TTH4"),
float.pos = "!ht",
digit=3,
stars = c(0.01, 0.05, 0.1),
custom.coef.names=ror$ccn,   reorder.coef=ror$rc,  omit.coef=ror$oc,
booktabs=T))
#### III. Sequential logit ####
# Step 1:
data_est$exit = ifelse(data_est$next_year == 'exit_oth' | data_est$next_year =='exit_next', 1, 0)
step1 <- glm(exit ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=data_est, x=T, family=binomial("logit"))
# Step 2:
data_est2 = data_est[which(data_est$exit == 1), ]
data_est2$exit_next = ifelse(data_est2$next_year =='exit_next', 1, 0)
step2 <- glm(exit_next ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=data_est2 , x=T, family=binomial("logit"))
m1 = extract.glm2(step1)
m2 = extract.glm2(step2)
model.list <- list(m1, m2)
name.map <- list("(intercept)"        = "Constante",
"sexeM"              = "Homme",
"generation_group22" = "Generation 70s",
"generation_group23" = "Generation 80s",
"c_cir_2011TTH2"     = "TTH2",
"c_cir_2011TTH3"     = "TTH3",
"c_cir_2011TTH4"     = "TTH4",
"I_bothC"            = "Conditions choix remplies",
"I_bothE"            = "Conditions exam remplies")
oldnames <- all.varnames.dammit(model.list)
ror <- build.ror(oldnames, name.map)
print(texreg2(model.list,
caption.above=T,
custom.model.names = c("Etape 1: exit vs. no exit", "Etape 2: exit\\_next vs. exit\\_oth"),
float.pos = "!ht",
digit=3,
stars = c(0.01, 0.05, 0.1),
custom.coef.names=ror$ccn,   reorder.coef=ror$rc,  omit.coef=ror$oc,
booktabs=T))
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_data_path = "/XXX/data/CNRACL/simulation/"
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "XXX/Graphiques/"
}
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL//"
save_data_path = "/XXX/data/CNRACL/predictions/"
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "XXX/Graphiques/"
}
################ Estimation by multinomial logit ################
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, "/filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
# Sample selection
data_est = data_min
data_est = data_est[which(data_est$left_censored == F & data_est$annee == 2011 & data_est$generation < 1990),]
data_est = create_variables(data_est)
#### I. Simple logit ####
data_est$next_year = as.character(data_est$next_grade_situation)
data_est$duration2 = data_est$time^2
data_est$duration3 = data_est$time^3
estim = mlogit.data(data_est, shape = "wide", choice = "next_year")
mlog0 = mlogit(next_year ~ 0 | 1, data = estim, reflevel = "no_exit")
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2, data = estim, reflevel = "no_exit")
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_5
cir_2011, data = estim, reflevel = "no_exit")
mlog3 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011 + duration + duration2 + duration3, data = estim, reflevel = "no_exit")
mlog4 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011 + I_bothC, data = estim, reflevel = "no_exit")
mlog5 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011 + I_bothC + I_bothE,
data = estim, reflevel = "no_exit")
mlog6 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estim, reflevel = "no_exit")
# bundle up some models
m1 = extract.mlogit2(mlog1)
m2 = extract.mlogit2(mlog2)
m3 = extract.mlogit2(mlog3)
m4 = extract.mlogit2(mlog4)
m5 = extract.mlogit2(mlog5)
m6 = extract.mlogit2(mlog6)
model.list <- list(m1, m2, m3, m4, m5, m6)
name.map <- list("exit_next:(intercept)"       = "exit_next: constante",
"exit_next:sexeM"             = "exit_next: Homme",
"exit_next:generation_group22"= "exit_next: Generation 70s",
"exit_next:generation_group23"= "exit_next: Generation 80s",
"exit_next:c_cir_2011TTH2"    = "exit_next: TTH2",
"exit_next:c_cir_2011TTH3"    = "exit_next: TTH3",
"exit_next:c_cir_2011TTH4"    = "exit_next: TTH4",
"exit_next:I_bothC"            = "exit_next: Conditions choix remplies",
"exit_next:I_bothE"            = "exit_next: Conditions exam remplies",
"exit_oth:(intercept)"        = "exit_oth: constante",
"exit_oth:sexeM"              = "exit_oth: Homme",
"exit_oth:generation_group22" = "exit_oth: Generation 70s",
"exit_oth:generation_group23" = "exit_oth: Generation 80s",
"exit_oth:c_cir_2011TTH2"     = "exit_oth: TTH2",
"exit_oth:c_cir_2011TTH3"     = "exit_oth: TTH3",
"exit_oth:c_cir_2011TTH4"     = "exit_oth: TTH4",
"exit_oth:I_bothC"            = "exit_oth: Conditions choix remplies",
"exit_oth:I_bothE"            = "exit_oth: Conditions exam remplies")
oldnames <- all.varnames.dammit(model.list)
ror <- build.ror(oldnames, name.map)
print(texreg2(model.list,
caption.above=F,
float.pos = "!ht",
digit=3,
stars = c(0.01, 0.05, 0.1),
custom.coef.names=ror$ccn,   reorder.coef=ror$rc,  omit.coef=ror$oc,
booktabs=T))
#### II. One logit by Grade ####
list1 = which(estim$c_cir_2011 == "TTH1")
list2 = which(estim$c_cir_2011 == "TTH2")
list3 = which(estim$c_cir_2011 == "TTH3")
list4 = which(data_est$c_cir_2011 == "TTH4")
data_est$exit2 = ifelse(data_est$next_year == 'exit_oth',1, 0)
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estim, reflevel = "no_exit")
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estim[list1, ], reflevel = "no_exit")
mlog3 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estim[list2, ], reflevel = "no_exit")
mlog4 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estim[list3, ], reflevel = "no_exit")
mlog5 = glm(exit2 ~  sexe + generation_group2 +
duration + duration2 + duration3,
data = data_est[list4, ], x=T, family=binomial("logit"))
save(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH3, file = paste0(save_model_path, "m1_by_grade.rda"))
m1_TTH1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estim[list1, ], reflevel = "no_exit")
m1_TTH2 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estim[list2, ], reflevel = "no_exit")
m1_TTH3 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estim[list3, ], reflevel = "no_exit")
m1_TTH4 = glm(exit2 ~  sexe + generation_group2 +
duration + duration2 + duration3,
data = data_est[list4, ], x=T, family=binomial("logit"))
save(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH3, file = paste0(save_model_path, "m1_by_grade.rda"))
save_model_path
save_model_path = "Q:/CNRACL/predictions/"
save(step1, step2, file = paste0(save_model_path, "m1_seq.rda"))
data_est$exit = ifelse(data_est$next_year == 'exit_oth' | data_est$next_year =='exit_next', 1, 0)
step1 <- glm(exit ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=data_est, x=T, family=binomial("logit"))
# Step 2:
data_est2 = data_est[which(data_est$exit == 1), ]
data_est2$exit_next = ifelse(data_est2$next_year =='exit_next', 1, 0)
step2 <- glm(exit_next ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=data_est2 , x=T, family=binomial("logit"))
save(step1, step2, file = paste0(save_model_path, "m1_seq.rda"))
save(mlog0, mlog3, mlog6, file = paste0(save_model_path, "m1_seq.rda"))
save(mlog0, mlog3, mlog6, file = paste0(save_model_path, "mlog.rda"))
save(step1, step2, file = paste0(save_model_path, "m1_seq.rda"))
wd
system('python test.py hello world', wait=False)
system('python test.py hello world', wait=FALSE)
system('python test.py hello world', wait=False)
system('python test.py hello world', wait=FALSE)
? python.load
install("Z:/Installations logiciels/Packages R/rPython")
library(rPython)
system('python test.py hello world', wait=FALSE)
? python.load
wd
getwd()
setwd(wd)
getwd()
system('python test.py hello world', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello world', wait=FALSE)
system('python "U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py" hello world', wait=FALSE)
system("python 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello' world", wait=FALSE)
data_path
all.varnames.dammit(model.list)
path_data = "M:/CNRACL/output/filter/data_ATT_2011_filtered_after_duration_var_added_new.csv"
path_utils = paste0(wd, "0_Outils_CNRACL.R")
save_data =  "M:/CNRACL/simulation/"
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data_obs = datasets[[1]]}
if (use == "min"){data_obs = datasets[[2]]}
data_obs create_variables(data_obs)
data_sim =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
list_var = c("ident", "annee",  "sexe", "generation_group2", "c_cir_2011",
"I_bothC", "I_bothE", "duration", "duration2", "duration3"),
save(data_sim[, list_var], file = paste0(save_data))
list_var = c("ident", "annee",  "sexe", "generation_group2", "c_cir_2011",
"I_bothC", "I_bothE", "duration", "duration2", "duration3")
system("python 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello' world", wait=FALSE)
library(rPython)
system("python 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello' world", wait=FALSE)
system("python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello world", wait=FALSE)
system('python "U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py" hello world', wait=FALSE)
paste('"c:/Program Files/Mozilla Firefox/firefox.exe"',
'-url cran.r-project.org')
system('python "U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/" test.py hello world', wait=FALSE)
system('python "U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py" hello world', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py hello world', wait=FALSE)
system('python "U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py"', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py', wait=FALSE)
? system
library(rPython)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py', wait=FALSE)
system('python U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/test.py', wait=FALSE)
system('python U://Projets//CNRACL//fonction-publique//fonction_publique//estimation//test.py', wait=FALSE)
system('python U://Projets//CNRACL//fonction-publique//fonction_publique//estimation//test.py')
system('python U://Projets//CNRACL//fonction-publique//fonction_publique//estimation//test.py')
annee = 2011
if (annee == 2011){ data_sim = function(data_path, path_utils = paste0(wd, "0_Outils_CNRACL.R"), use = "min")}
if (annee == 2011){ data_sim = function(data_path, path_utils = paste0(wd, "0_Outils_CNRACL.R"), use = "min")}
if (annee == 2011){data_sim = generate_data_sim(data_path, path_utils = paste0(wd, "0_Outils_CNRACL.R"), use = "min")}
generate_data_sim <- function(data_path, path_utils, use = "min")
{
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data_obs = datasets[[1]]}
if (use == "min"){data_obs = datasets[[2]]}
data_obs  =  create_variables(data_obs)
data_sim =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
list_var = c("ident", "annee",  "sexe", "generation_group2", "c_cir_2011",
"I_bothC", "I_bothE", "duration", "duration2", "duration3",
"echelon", "time", "anciennete_echelon", "ib")
return(data_sim[, list_var])
}
if (annee == 2011){data_sim = generate_data_sim(data_path, path_utils = paste0(wd, "0_Outils_CNRACL.R"), use = "min")}
load(paste0("save_model_path, mlog.rda"))
paste0("save_model_path, mlog.rda")
load(paste0(save_model_path, "mlog.rda"))
list_MNL = c(mlog0, mlog3, mlog5)
m = 1
model = list_MNL[[m]]
modelname  =  paste0("next_year_MNL_", toString(m))
predict_next_year_MNL <- (data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim[, modelname] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
pred =  predict_next_year_MNL(data_sim, model, modelname)
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim[, modelname] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
pred =  predict_next_year_MNL(data_sim, model, modelname)
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
modelname
prob     <- predict(model, data_predict_MNL,type = "response")
model
list_MNL[1]
list_MNL
list_MNL[1]
list_MNL[2]
list_MNL = list(mlog0, mlog3, mlog5)
list_MNL[1]
list_MNL[[m]]
model = list_MNL[[m]]
pred =  predict_next_year_MNL(data_sim, model, modelname)
tirage_next_year_MNL <- function(p1,p2,p3)
{
# random draw of next year situation based on predicted probabilities
n = sample(c("no_exit", "exit_next",  "exit_oth"), size = 1, prob = c(p1,p2,p3), replace = T)
return(n)
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim[, modelname] <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
pred =  predict_next_year_MNL(data_sim, model, modelname)
pred
modelname
save_prediction(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$ib    = data$ib_2011
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation", "next_grade")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$hat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
save_prediction(pred, annee, save_data_path, modelname)
save_prediction <- function(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$ib    = data$ib_2011
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation", "next_grade")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$hat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
save_prediction(pred, annee, save_data_path, modelname)
save_prediction <- function(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$ib    = data$ib_2011
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
save_prediction(pred, annee, save_data_path, modelname)
data = pred
data$corps = "ATT"
data$grade = data$c_cir
data$ib    = data$ib_2011
data$next_situation = data$yhat
data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
data[, c("ident", "annee", "corps", "grade", "ib")]
data$ibn
data$ib
names(data_sim)
names(pred)
pred$ib
save_prediction <- function(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
save_prediction(data = pred, annee, save_data_path, modelname)
data$c_cir
data$echelon
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
data[, c("ident", "annee", "corps")]
data$ib
pred$ib
data = pred
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
data$ib
data$grade
data$next_situation
data$yhat
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction(data = pred, annee, save_data_path, modelname)
save_prediction <- function(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$hat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction(data = pred, annee, save_data_path, modelname)
names(pred)
save_prediction <- function(data, annee, save_data_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL,type = "response")
data_sim$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
return(data_sim)
}
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction(data = pred, annee, save_data_path, modelname)
save_data_simul_path = "M:/CNRACL/simulation/"
model = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction(data = pred, annee, save_data_path, modelname)
if (annee == 2011){data_sim = generate_data_sim(data_path, path_utils = paste0(wd, "0_Outils_CNRACL.R"), use = "min")}
# Prediction for MNL
load(paste0(save_model_path, "mlog.rda"))
list_MNL = list(mlog0, mlog3, mlog5)
model = list_MNL[[m]]
modelname  =  paste0("MNL_", toString(m))
pred =  predict_next_year_MNL(data_sim, model, modelname)
save_prediction(data = pred, annee, save_data_path, modelname)
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
save_data_simul_path = "M:/CNRACL/simulation/"
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "XXX/Graphiques/"
}
setwd(wd)
save_prediction(data = pred, annee, save_data_path, modelname)
save_prediction(data = pred, annee, save_data_simul_path, modelname)
paste0("Data ", paste0(save_data_path, annee, "_data_simul_",modelname,".csv"), " saved")
save_prediction <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_data_path, annee, "_data_simul_",modelname,".csv"))
print(paste0("Data ", paste0(save_data_path, annee, "_data_simul_",modelname,".csv"), " saved"))
}
save_prediction(data = pred, annee, save_data_simul_path, modelname)
save_data_simul_path = "M:/CNRACL/simulation/"
save_prediction(data = pred, annee, save_data_simul_path, modelname)
save_prediction <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$grade = data$c_cir
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "next_situation")]
write.csv(data, file = paste0(save_path, annee, "_data_simul_",modelname,".csv"))
print(paste0("Data ", paste0(save_path, annee, "_data_simul_",modelname,".csv"), " saved"))
}
save_prediction(data = pred, annee, save_data_simul_path, modelname)
