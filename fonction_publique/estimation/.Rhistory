install.packages("Rtools")
install.packages("Rtools32")
install.packages("Rtools33")
install("Z:/Installations logiciels/Packages R/rPython")
install("Z:/Exchange/rPython")
install("Z:/Installations logiciels/Packages R/rPython")
#### 0. Initialisation ####
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "data_ATT_2002_2015_with_filter_on_etat_at_exit_and_change_to_filter_on_etat_grade_corrected.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
install("Z:/Installations logiciels/Packages R/rPython")
# Sample selection
data_obs =  data_min[which(data_min$left_censored == F & data_min$generation < 1990),]
data_obs = create_variables(data_obs)
data_est =  data_obs[which(data_obs$annee  == 2011),]
data_ini =  data_sim[which(data_sim$left_censored == F  & data_sim$annee == 2011),]
####  I. Estimations ####
estimMNL  = mlogit.data(data_est, shape = "wide", choice = "next_year")
estimGLM  = data_est
##  I.1 MNM logit ##
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3,
data = estim, reflevel = "no_exit")
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3
+ I_bothC + I_bothE,
data = estim, reflevel = "no_exit")
##  I.2 Model par grade ##
list1 = which(estimMNL$c_cir_2011 == "TTH1")
list2 = which(estimMNL$c_cir_2011 == "TTH2")
list3 = which(estimMNL$c_cir_2011 == "TTH3")
list4 = which(estimGLM$c_cir_2011 == "TTH4")
estimGLM$exit2 = ifelse(estimGLM$next_year == 'exit_oth',1, 0)
mTTH1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estimMNL[list1, ], reflevel = "no_exit")
mTTH2 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list2, ], reflevel = "no_exit")
mTTH3 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list3, ], reflevel = "no_exit")
mTTH4 = glm(exit2 ~  sexe + generation_group2 +
duration + duration2 + duration3,
data = estimGLM[list4, ], x=T, family=binomial("logit"))
##  I.3 Model sequentiel ##
estimGLM$exit = ifelse(estimGLM$next_year == 'exit_oth' | estimGLM$next_year =='exit_next', 1, 0)
estimGLM2 = estimGLM[which(estimGLM$exit == 1), ]
estimGLM2$exit_next = ifelse(estimGLM2$next_year =='exit_next', 1, 0)
step1 <- glm(exit ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM, x=T, family=binomial("logit"))
step2 <- glm(exit_next ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM2 , x=T, family=binomial("logit"))
#### 0. Initialisation ####
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "data_ATT_2002_2015_with_filter_on_etat_at_exit_and_change_to_filter_on_etat_grade_corrected.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
install("Z:/Installations logiciels/Packages R/rPython")
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "/filter/data_ATT_2002_2015_with_filter_on_etat_at_exit_and_change_to_filter_on_etat_grade_corrected.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2002_2015_with_filter_on_etat_at_exit_and_change_to_filter_on_etat_grade_corrected.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
install("Z:/Installations logiciels/Packages R/rPython")
##  I.1 MNM logit ##
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3,
data = estim, reflevel = "no_exit")
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3
+ I_bothC + I_bothE,
data = estim, reflevel = "no_exit")
##  I.2 Model par grade ##
list1 = which(estimMNL$c_cir_2011 == "TTH1")
list2 = which(estimMNL$c_cir_2011 == "TTH2")
list3 = which(estimMNL$c_cir_2011 == "TTH3")
list4 = which(estimGLM$c_cir_2011 == "TTH4")
estimGLM$exit2 = ifelse(estimGLM$next_year == 'exit_oth',1, 0)
mTTH1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estimMNL[list1, ], reflevel = "no_exit")
data_est =  data_obs[which(data_obs$annee  == 2011),]
data_ini =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
####  I. Estimations ####
estimMNL  = mlogit.data(data_est, shape = "wide", choice = "next_year")
estimGLM  = data_est
##  I.1 MNM logit ##
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3,
data = estimMNL, reflevel = "no_exit")
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3
+ I_bothC + I_bothE,
data = estimMNL, reflevel = "no_exit")
#### 0. Initialisation ####
# Main data
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
install("Z:/Installations logiciels/Packages R/rPython")
# Sample selection
data_obs =  data_min[which(data_min$left_censored == F & data_min$generation < 1990),]
data_obs = create_variables(data_obs)
data_est =  data_obs[which(data_obs$annee  == 2011),]
data_ini =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
names(data_ini)
estimMNL  = mlogit.data(data_est, shape = "wide", choice = "next_year")
estimGLM  = data_est
##  I.1 MNM logit ##
mlog1 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3,
data = estimMNL, reflevel = "no_exit")
mlog0 = mlogit(next_year ~ 0 | 1,
data = estimMNL, reflevel = "no_exit")
##  I.2 Model par grade ##
list1 = which(estimMNL$c_cir_2011 == "TTH1")
list2 = which(estimMNL$c_cir_2011 == "TTH2")
list3 = which(estimMNL$c_cir_2011 == "TTH3")
list4 = which(estimGLM$c_cir_2011 == "TTH4")
estimGLM$exit2 = ifelse(estimGLM$next_year == 'exit_oth',1, 0)
mTTH1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estimMNL[list1, ], reflevel = "no_exit")
mTTH2 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list2, ], reflevel = "no_exit")
mTTH3 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list3, ], reflevel = "no_exit")
mTTH4 = glm(exit2 ~  sexe + generation_group2 +
duration + duration2 + duration3,
data = estimGLM[list4, ], x=T, family=binomial("logit"))
##  I.3 Model sequentiel ##
estimGLM$exit = ifelse(estimGLM$next_year == 'exit_oth' | estimGLM$next_year =='exit_next', 1, 0)
estimGLM2 = estimGLM[which(estimGLM$exit == 1), ]
estimGLM2$exit_next = ifelse(estimGLM2$next_year =='exit_next', 1, 0)
step1 <- glm(exit ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM, x=T, family=binomial("logit"))
step2 <- glm(exit_next ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM2 , x=T, family=binomial("logit"))
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_ini), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_ini$next_year <-adhoc
data_predict <- mlogit.data(data_ini, shape = "wide", choice = "next_year")
data_ini
##  I.1 MNM logit ##
list_models = list(mlog1, mlog2, mlog3)
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
mlog2 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3,
data = estimMNL, reflevel = "no_exit")
list_models = list(mlog1, mlog2, mlog3)
mlog3 = mlogit(next_year ~ 0 | sexe + generation_group2 + c_cir_2011
+  duration + duration2 + duration3
+ I_bothC + I_bothE,
data = estimMNL, reflevel = "no_exit")
list_models = list(mlog1, mlog2, mlog3)
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
data_sim =  data_obs[which(data_obs$left_censored == F  & data_obs$annee == 2011),]
##  I.1 MNM logit ##
list_models = list(mlog1, mlog2, mlog3)
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
next_year_hat
data_sim[, next_year_hat]
length(data_sim[, next_year_hat])
names(data_sim)
##  I.1 MNM logit ##
list_models = list(mlog1, mlog2, mlog3)
predMNL = data_sim$ident
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
predMNL = cbind(predMNL, data_sim[, next_year_hat])
}
View(predMNL)
ident = data_sim$ident
predMNL = as.data.frame(data_sim$ident)
View(predMNL)
? as.data.frame
##  I.1 MNM logit ##
list_models = list(mlog1, mlog2, mlog3)
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
mTTH1_1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC + I_bothE + duration + duration2 + duration3,
data = estimMNL[list1, ], reflevel = "no_exit")
mTTH2_1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list2, ], reflevel = "no_exit")
mTTH3_1 = mlogit(next_year ~ 0 | sexe + generation_group2 +
I_bothC +  duration + duration2 + duration3,
data = estimMNL[list3, ], reflevel = "no_exit")
mTTH4_1 = glm(exit2 ~  sexe + generation_group2 +
duration + duration2 + duration3,
data = estimGLM[list4, ], x=T, family=binomial("logit"))
##  I.3 Model sequentiel ##
estimGLM$exit = ifelse(estimGLM$next_year == 'exit_oth' | estimGLM$next_year =='exit_next', 1, 0)
estimGLM2 = estimGLM[which(estimGLM$exit == 1), ]
estimGLM2$exit_next = ifelse(estimGLM2$next_year =='exit_next', 1, 0)
step1_1 <- glm(exit ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM, x=T, family=binomial("logit"))
step2_1 <- glm(exit_next ~  sexe + generation_group2 + c_cir_2011 +
I_bothC + I_bothE + duration + duration2 + duration3,
data=estimGLM2 , x=T, family=binomial("logit"))
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_predict_MNL <- mlogit.data(data_sim, shape = "wide", choice = "next_year")
data_predict     <- data_sim
list_models = list(mlog1, mlog2, mlog3)
for (m in 1:length(list_models))
{
model = list_models[[m]]
prob     <- predict(model, data_predict_MNL,type = "response")
next_year_hat <-  paste0("next_year_hat_MNL_", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
list_models = list(mTTH1, mTTH2, mTTH3, mTTH4)
m = 1
model = list_models[[m]]
prob     <- predict(model, data_predict_MNL,type = "response")
next_year_hat <-  paste0("next_year_TTH", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
next_year_hat
prob
m = 4
model = list_models[[m]]
prob     <- predict(model, data_predict, type = "response")
prob
mapply(tirage, prob)
list_models = list(mTTH1, mTTH2, mTTH3, mTTH4)
for (m in 1:length(list_models))
{
model = list_models[[m]]
if (m < 4)
{
prob     <- predict(model, data_predict_MNL,type = "response")
next_year_hat <-  paste0("next_year_TTH", toString(m))
data_sim[, next_year_hat] <- mapply(predict_next_year, prob[,1], prob[,2], prob[,3])
}
if (m == 4)
{
prob     <- predict(model, data_predict, type = "response")
pred     <- as.numeric(mapply(tirage, prob))
next_year_hat <-  paste0("next_year_TTH", toString(m))
data_sim[, next_year_hat] <- ifelse(pred == 1, "exit_oth", "no_exit")
}
}
names(data_sim)
data_sim$next_year_byG_1 = data_sim$next_year_TTH1
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH2")] =  data_sim$next_year_TTH2[which(data_sim$c_cir_2011 == "TTH2")]
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH3")] =  data_sim$next_year_TTH2[which(data_sim$c_cir_2011 == "TTH3")]
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH4")] =  data_sim$next_year_TTH2[which(data_sim$c_cir_2011 == "TTH4")]
prob1     <- predict(step1_1, data_predict, type = "response")
prob2     <- predict(step2_1, data_predict, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
pred2
prob1     <- predict(step1_1, data_predict, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(step2_1, data_predict, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_sim$next_year_MS_1 <- ifelse(pred1 == 1, "exit", "no_exit")
data_sim$next_year_MS_1[which(pred1 == 1 & pred2 = 1)] <- "exit_next"
data_sim$next_year_MS_1[which(pred1 == 1 & pred2 = 0)] <- "exit_oth"
prob1     <- predict(step1_1, data_predict, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(step2_1, data_predict, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_sim$next_year_MS_1 <- ifelse(pred1 == 1, "exit", "no_exit")
data_sim$next_year_MS_1[which(pred1 == 1 & pred2 == 1)] <- "exit_next"
data_sim$next_year_MS_1[which(pred1 == 1 & pred2 == 0)] <- "exit_oth"
for (v in c("next_year_hat_MNL_2","next_year_byG_1", "next_year_MS_1"))
{
table(data_sim[,v])
}
for (v in c("next_year_hat_MNL_2","next_year_byG_1", "next_year_MS_1"))
{
print(table(data_sim[,v]) )
}
names(data_sim)
for (v in c("next_year", "next_year_hat_MNL_2","next_year_byG_1", "next_year_MS_1"))
{
print(table(data_sim[,v]) )
}
data_sim$annee
mlogit.data
? mlogit.data
names(data_sim)
#
for (v in c("next_grade_situation", "next_year_hat_MNL_2","next_year_byG_1", "next_year_MS_1"))
{
print(table(data_sim[,v]) )
}
data_sim$next_year_byG_1 = data_sim$next_year_TTH1
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH2")] =  data_sim$next_year_TTH2[which(data_sim$c_cir_2011 == "TTH2")]
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH3")] =  data_sim$next_year_TTH3[which(data_sim$c_cir_2011 == "TTH3")]
data_sim$next_year_byG_1[which(data_sim$c_cir_2011 == "TTH4")] =  data_sim$next_year_TTH4[which(data_sim$c_cir_2011 == "TTH4")]
#
for (v in c("next_grade_situation", "next_year_hat_MNL_2","next_year_byG_1", "next_year_MS_1"))
{
print(table(data_sim[,v]) )
}
list_all_models = c("next_year_hat_MNL_1", "next_year_hat_MNL_2","next_year_hat_MNL_3","next_year_byG_1", "next_year_MS_1")
launch_prediction_Py(annee, modelname)
# Load and save results
simul_py = load_simul_py(annee, modelname)
##  Paths ####
rm(list = ls()); gc()
user = "simrab"
if (user == "simrab")
{
wd =  'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
data_path = "M:/CNRACL/output/"
save_model_path = "Q:/CNRACL/predictions/"
simul_path  = "M:/CNRACL/simulation/results/"
python_file_path = 'U:/Projets/CNRACL/fonction-publique/fonction_publique/estimation/'
git_path =  'XXX/IPP/CNRACL'
fig_path = "Q:/CNRACL/Note CNRACL/Figures/"
tab_path = "Q:/CNRACL/Note CNRACL/Figures/"
}
setwd(wd)
source(paste0(wd, "0_Outils_CNRACL.R"))
# Load results
load(paste0(simul_path, "predictions4.Rdata"))
## NEW FILTER: à déplacer dans select_data
list_id = unique(output_global$ident[which(output_global$echelon == -1)])
output_global = output_global[which(!is.element(output_global$ident, list_id)), ]
# Caracteristics of movers
movers_characteristics = function(data, exit_var)
{
data = data[which(data$annee == 2011),]
data$exit = as.character(data[, exit_var])
data$cond = data[, "I_bothC_MNL_1"]
data$age = 2011 - data$generation
data$femme =ifelse(data$sexe == "F", 1, 0)
table_movers = numeric(22)
# All
table_movers[1] = 100*length(which(data$exit[] == "exit_next"))/length(data$exit[])
table_movers[2] = 100*length(which(data$exit[] == "exit_oth"))/length(data$exit[])
# Women
list = which(data$exit == "exit_next")
table_movers[3] = 100*mean(data$femme[list])
list = which(data$exit == "exit_oth")
table_movers[4] = 100*mean(data$femme[list])
# Age
list = which(data$exit == "exit_next")
table_movers[5] = mean(data$age[list])
list = which(data$exit == "exit_oth")
table_movers[6] = mean(data$age[list])
# TTH1
list = which(data$c_cir_2011 == "TTH1")
table_movers[7] = 100*length(which(data$exit[list] == "exit_next"))/length(data$exit[list])
table_movers[8] = 100*length(which(data$exit[list] == "exit_oth"))/length(data$exit[list])
# TTH2
list = which(data$c_cir_2011 == "TTH2")
table_movers[9] = 100*length(which(data$exit[list] == "exit_next"))/length(data$exit[list])
table_movers[10] = 100*length(which(data$exit[list] == "exit_oth"))/length(data$exit[list])
# TTH3
list = which(data$c_cir_2011 == "TTH3")
table_movers[11] = 100*length(which(data$exit[list] == "exit_next"))/length(data$exit[list])
table_movers[12] = 100*length(which(data$exit[list] == "exit_oth"))/length(data$exit[list])
# TTH4
list = which(data$c_cir_2011 == "TTH4")
table_movers[13] = 100*length(which(data$exit[list] == "exit_next"))/length(data$exit[list])
table_movers[14] = 100*length(which(data$exit[list] == "exit_oth"))/length(data$exit[list])
# IB distrib
list = which(data$exit == "exit_next")
table_movers[15] = mean(data$ib[list])
table_movers[16:18] = as.numeric(quantile(data$ib[list])[2:4])
list = which(data$exit == "exit_oth")
table_movers[19] = mean(data$ib[list])
table_movers[20:22] = as.numeric(quantile(data$ib[list])[2:4])
# Ech when mov
list =   which(data$exit == "exit_next")
table_movers[23] = mean(data$echelon[list])
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH1")
table_movers[24] = mean(data$echelon[list])
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH2")
table_movers[25] = mean(data$echelon[list])
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH3")
table_movers[26] = mean(data$echelon[list])
# Condition remplies when exit next by grade
list =   which(data$exit == "exit_next")
table_movers[27] = mean(data$cond[list], na.rm = T)
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH1")
table_movers[28] = mean(data$cond[list], na.rm = T)
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH2")
table_movers[29] = mean(data$cond[list], na.rm = T)
list =   which(data$exit == "exit_next" & data$c_cir_2011 == "TTH3")
table_movers[30] = mean(data$cond[list], na.rm = T)
return(table_movers)
}
table_obs =  movers_characteristics(data = output_global, exit_var = "situation")
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1","MS_2"))
{
var = paste0("situation_", m)
table     = movers_characteristics(data = output_global, exit_var = var)
assign(paste0("table_", m), table)
}
table_movers = cbind(table_obs, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1, table_MS_2)
colnames(table_movers) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1", "MS\\_1", "MS\\_2")
rownames(table_movers) = c("\\% exit next All", "\\% exit oth All",
"\\% Women when exit next", "\\% Women when exit oth",
"Mean age when exit next", "Mean age  when exit oth",
"\\% exit next TTH1", "\\% exit oth TTH1", "\\% exit next TTH2", "\\% exit oth TTH2",
"\\% exit next TTH3", "\\% exit oth TTH3", "\\% exit next TTH4", "\\% exit oth TTH4",
"Mean IB when exit next", "Q1 IB when exit next", "Q2 IB when exit next","Q3 IB when exit next",
"Mean IB when exit oth", "Q1 IB when exit oth", "Q2 IB when exit oth","Q3 IB when exit oth",
"Mean echelon when exit next",  "Mean ech when exit next TTH1", "Mean ech when exit next TTH2", "Mean ech when exit next TTH3",
"\\% cond. remplies when exit next",  "\\% cond. remplies when exit next TTH1",
"\\% cond. remplies when exit next  TTH2","\\% cond. remplies when exit next  TTH3")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*14),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers), align = "l|c|ccccc",
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 14, 18, 22, 26),
only.contents=F, include.colnames = T)
y = 2011
list1 = output_global$ident[which(output_global$grade == "TTH2" & output_global$annee == y)]
list2 = output_global$ident[which(output_global$grade == "TTH3" & output_global$annee == y+1)]
listA = intersect(list1, list2)
data_check = output_global[which(is.element(output_global$ident, listA)),]
data_check = data_check[which(data_check$annee == y | data_check$annee == y+1), ]
table(data_check$echelon[which(data_check$annee == y)])
table(data_check$time[which(data_check$annee == y)])
names(data_check)
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, "/filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
data_stat_min = data_min[which(data_min$left_censored == F & data_min$annee <= 2014),]
data_stat_max = data_max[which(data_max$left_censored == F & data_max$annee <= 2014),]
y = 2011
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH2" & data_stat_min$annee == y)]
list2 = output_global$ident[which(data_stat_min$grade == "TTH3" & data_stat_min$annee == y+1)]
listA = intersect(list1, list2)
data_check = data_stat_min[which(is.element(data_stat_min$ident, listA)),]
data_check = data_check[which(data_check$annee == y | data_check$annee == y+1), ]
table(data_check$echelon[which(data_check$annee == y)])
y = 2011
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH2" & data_stat_min$annee == y)]
list2 = data_stat_min$ident[which(data_stat_min$grade == "TTH3" & data_stat_min$annee == y+1)]
listA = intersect(list1, list2)
data_check = data_stat_min[which(is.element(data_stat_min$ident, listA)),]
data_check = data_check[which(data_check$annee == y | data_check$annee == y+1), ]
table(data_check$echelon[which(data_check$annee == y)])
names(data_stat_max)
table(data_stat_max$grade)
list2
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH2" & data_stat_min$annee == y)]
list2 = data_stat_min$ident[which(data_stat_min$grade == "TTH3" & data_stat_min$annee == y+1)]
listA = intersect(list1, list2)
listA
table(data_stat_min$grade[which(is.element(data_stat_min$ident, list1))]
)
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH2" & data_stat_min$grade_next == "TTH3" & data_stat_min$annee == y)]
y = 2011
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH2" & data_stat_min$grade_next == "TTH3" & data_stat_min$annee == y)]
data_check = data_stat_min[which(is.element(data_stat_min$ident, list1)),]
data_check = data_check[which(data_check$annee == y | data_check$annee == y+1), ]
table(data_check$echelon[which(data_check$annee == y)])
names(data_check)
table(data_check$time_spent_in_grade_min[which(data_check$annee == y)])
y = 2011
list1 = data_stat_min$ident[which(data_stat_min$grade == "TTH3" & data_stat_min$grade_next == "TTH4" & data_stat_min$annee == y)]
data_check = data_stat_min[which(is.element(data_stat_min$ident, list1)),]
data_check = data_check[which(data_check$annee == y | data_check$annee == y+1), ]
table(data_check$echelon[which(data_check$annee == y)])
table(data_check$time_spent_in_grade_min[which(data_check$annee == y)])
table(data_check$time_spent_in_grade_max[which(data_check$annee == y)])
