data=data_est2 , x=T, family=binomial("logit"))
save(step1_m2, step2_m2, file = paste0(save_model_path, "m2_seq.rda"))
m1 = extract.glm2(step1_m2)
m2 = extract.glm2(step2_m2)
model.list <- list(m1, m2)
name.map <- list("(intercept)"        = "Constante",
"sexeM"              = "Homme",
"generation_group22" = "Generation 70s",
"generation_group23" = "Generation 80s",
"gradeTTH2"     = "TTH2",
"gradeTTH3"     = "TTH3",
"gradeTTH4"     = "TTH4",
"I_bothC"            = "Conditions choix remplies",
"I_bothE"            = "Conditions exam remplies")
oldnames <- all.varnames.dammit(model.list)
ror <- build.ror(oldnames, name.map)
print(texreg2(model.list,
caption.above=T,
custom.model.names = c("Etape 1: Sortie corps? ", "Etape 2: Changement de grade?"),
float.pos = "!ht",
digit=3,
stars = c(0.01, 0.05, 0.1),
custom.coef.names=ror$ccn,   reorder.coef=ror$rc,  omit.coef=ror$oc,
booktabs=T))
### M2 : sortie du corps? / changement de grade?
# Step 1:
data_est$exit_corps = ifelse(data_est$next_year == 'exit_oth', 1, 0)
step1_m2 <- glm(exit_corps ~  sexe + generation_group2 + grade + duration + duration2 + duration3,
data=data_est, x=T, family=binomial("logit"))
# Step 2:
data_est2 = data_est[which(data_est$exit_corps == 0), ]
data_est2$exit_next = ifelse(data_est2$next_year =='exit_next', 1, 0)
step2_m2 <- glm(exit_next ~  sexe + generation_group2 + grade +
I_bothC + I_bothE + duration + duration2 + duration3,
data=data_est2 , x=T, family=binomial("logit"))
save(step1_m2, step2_m2, file = paste0(save_model_path, "m2_seq.rda"))
step1_m2
save(step1_m2, step2_m2, file = paste0(save_model_path, "m2_seq.rda"))
m1 = extract.glm2(step1_m2)
m2 = extract.glm2(step2_m2)
model.list <- list(m1, m2)
name.map <- list("(intercept)"        = "Constante",
"sexeM"              = "Homme",
"generation_group22" = "Generation 70s",
"generation_group23" = "Generation 80s",
"gradeTTH2"     = "TTH2",
"gradeTTH3"     = "TTH3",
"gradeTTH4"     = "TTH4",
"I_bothC"            = "Conditions choix remplies",
"I_bothE"            = "Conditions exam remplies")
oldnames <- all.varnames.dammit(model.list)
ror <- build.ror(oldnames, name.map)
print(texreg2(model.list,
caption.above=T,
custom.model.names = c("Etape 1: Sortie corps? ", "Etape 2: Changement de grade?"),
float.pos = "!ht",
digit=3,
stars = c(0.01, 0.05, 0.1),
custom.coef.names=ror$ccn,   reorder.coef=ror$rc,  omit.coef=ror$oc,
booktabs=T))
################ Simulation with multinomial logit ################
# Simulation of trajectories based on estimation of the model.
# Two types of simulations:
#     i) Simulation of grade exit (2011 --> 2015)
#     ii)  Simulation of next ib (2011 --> 2012)
# Program:
# 0.  Initialisation: data loading and variable creations
# I.  Estimation: estimation of the models for predictions
# II. Simulation: from estimates, creating the two outputs for simulation diagnosis.
#### 0. Initialisation ####
source(paste0(wd, "0_Outils_CNRACL.R"))
load(paste0(save_model_path, "mlog.rda"))
load(paste0(save_model_path, "m1_seq.rda"))
load(paste0(save_model_path, "m2_seq.rda"))
################ Simulation with multinomial logit ################
# Simulation of trajectories based on estimation of the model.
# Two types of simulations:
#     i) Simulation of grade exit (2011 --> 2015)
#     ii)  Simulation of next ib (2011 --> 2012)
# Program:
# 0.  Initialisation: data loading and variable creations
# I.  Estimation: estimation of the models for predictions
# II. Simulation: from estimates, creating the two outputs for simulation diagnosis.
#### 0. Initialisation ####
source(paste0(wd, "0_Outils_CNRACL.R"))
load(paste0(save_model_path, "mlog.rda"))
load(paste0(save_model_path, "m1_seq.rda"))
load(paste0(save_model_path, "m2_seq.rda"))
load(paste0(save_model_path, "m1_by_grade.rda"))
set.seed(1234)
generate_data_sim <- function(data_path, use = "min")
{
datasets = load_and_clean(data_path, dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
if (use == "max"){data = datasets[[1]]}
if (use == "min"){data = datasets[[2]]}
list_var = c("ident", "annee",  "sexe", "c_cir_2011", "generation", "an_aff", "grade",
"E_exam", "E_choice", "D_exam", "D_choice",
"time", "anciennete_dans_echelon", "echelon", "ib")
data = data[which(data$left_censored == F  & data$annee == 2011 & data$generation < 1990),
list_var ]
data_sim  =  create_variables(data)
return(data_sim)
}
generate_data_output <- function(data_path)
{
dataname = "filter/data_ATT_2011_filtered_after_duration_var_added_new.csv"
filename = paste0(data_path, dataname)
data_long = read.csv(filename)
data_long$grade = data_long$c_cir
data_long$situation = data_long$next_grade_situation
list_var = c("ident", "annee", "c_cir_2011", "sexe", "generation", "grade","ib", "echelon", "situation")
output = data_long[which(data_long$annee >= 2011 & data_long$annee <= 2015), list_var]
output$I_bothC = NULL
return(output[, list_var])
}
save_prediction_R <- function(data, annee, save_path, modelname)
{
data$corps = "ATT"
data$next_situation = data$yhat
data = data[, c("ident", "annee", "corps", "grade", "ib", "echelon", "anciennete_dans_echelon", "next_situation")]
filename = paste0(save_path, annee, "_data_simul_withR_",modelname,".csv")
write.csv(data, file = filename)
print(paste0("Data ", filename, " saved"))
}
launch_prediction_Py <- function(annee, modelname, debug = F)
{
input_name = paste0(annee, "_data_simul_withR_",modelname,".csv")
output_name = paste0(annee, "_data_simul_withPy_",modelname,".csv")
input_arg = paste0(" -i ", input_name)
output_arg = paste0(" -o ", output_name)
d = ifelse(debug, " -d", "")
args = paste0(input_arg, output_arg, d)
command =  paste0('simulation',  args)
shell(command)
}
load_simul_py <- function(annee, modelname)
{
filename = paste0(simul_path, paste0(annee, "_data_simul_withPy_",modelname,".csv"))
simul = read.csv(filename)
simul = simul[order(simul$ident),-1]
#names(simul) = c("ident", "next_annee", "next_grade", "next_echelon", "next_annicennete_dans_echelon")
return(simul)
}
predict_next_year_MNL <- function(data_sim, model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_sim$grade <-as.character(data_sim$grade)
# Prediction for AT grade
data_AT = data_sim[which(is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_predict_MNL <- mlogit.data(data_AT, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict_MNL ,type = "response")
data_AT$yhat <- mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
#
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
predict_next_year_byG <- function(data_sim, list_model, modelname)
{
adhoc <- sample(c("no_exit",   "exit_next", "exit_oth"), nrow(data_sim), replace=TRUE, prob = c(0.2, 0.2, 0.6))
data_sim$next_year <-adhoc
data_sim$grade <-as.character(data_sim$grade)
# Prediction by grade
n = names(data_sim)
data_merge = as.data.frame(setNames(replicate(length(n),numeric(0), simplify = F), n))
list_grade = c("TTH1","TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
data = data_sim[which(data_sim$grade == list_grade[g]), ]
model = list_model[[g]]
if (list_grade[g] != "TTH4")
{
data_predict = mlogit.data(data, shape = "wide", choice = "next_year")
prob     <- predict(model, data_predict ,type = "response")
data$yhat = mapply(tirage_next_year_MNL, prob[,1], prob[,2], prob[,3])
}
if (list_grade[g] == "TTH4")
{
data_predict = data
prob     <- predict(model, data_predict ,type = "response")
pred     <- as.numeric(mapply(tirage, prob))
data$yhat = ifelse(pred == 1, "exit_oth", "no_exit")
}
data_merge = rbind(data_merge, data)
}
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, list_grade)), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_merge, data_noAT)
}
else{
data_sim =  data_merge
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
predict_next_year_seq_m1 <- function(data_sim, m1, m2, modelname)
{
# Prediction for AT grade
data_AT = data_sim[which(is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
prob1     <- predict(m1, data_AT, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(m2, data_AT, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_AT$yhat <- ifelse(pred1 == 1, "exit", "no_exit")
data_AT$yhat[which(pred1 == 1 & pred2 == 1)] <- "exit_next"
data_AT$yhat[which(pred1 == 1 & pred2 == 0)] <- "exit_oth"
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
predict_next_year_seq_m2 <- function(data_sim, m1, m2, modelname)
{
# Prediction for AT grade
data_AT = data_sim[which(is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
prob1     <- predict(m1, data_AT, type = "response")
pred1     <- as.numeric(mapply(tirage, prob1))
prob2     <- predict(m2, data_AT, type = "response")
pred2     <- as.numeric(mapply(tirage, prob2))
data_AT$yhat <- ifelse(pred1 == 1, "exit_oth", "no_exit")
data_AT$yhat[which(pred1 == 0 & pred2 == 1)] <- "exit_next"
data_AT$yhat[which(pred1 == 0 & pred2 == 0)] <- "no_exit"
if (length(unique(data_sim$grade)) > 4)
{
data_noAT = data_sim[which(!is.element(data_sim$grade, c("TTH1","TTH2", "TTH3", "TTH4"))), ]
data_noAT$yhat = "no_exit"
data_sim = rbind(data_AT, data_noAT)
}
if (length(unique(data_sim$grade)) <= 4)
{
data_sim = data_AT
}
data_sim = data_sim[order(data_sim$ident), ]
return(data_sim)
}
increment_data_sim <- function(data_sim, simul_py)
{
# Deleting individuals with pbl
if (length(data_sim$ident) != length(simul_py$ident) | length(which(is.na(simul_py$ib)) >0 )  | length(which(is.na(simul_py$grade)) >0 ))
{
list_pbl_id1 = unique(setdiff(data_sim$ident, simul_py$ident))
print(paste0("Il y a ",length(list_pbl_id1)," présents dans data_sim et absent dans simul"))
list_pbl_id2 = unique(setdiff(simul_py$ident, data_sim$ident))
print(paste0("Il y a ",length(list_pbl_id2)," présents dans simul et absent dans data_sim"))
list_pbl_ib = unique(simul_py$ident[which(is.na(simul_py$ib))])
print(paste0("Il y a ",length(list_pbl_ib)," individus dans la base simul  avec ib = NA"))
list_pbl_grade = unique(simul_py$ident[which(is.na(simul_py$grade) | simul_py$grade == "nan")])
print(paste0("Il y a ",length(list_pbl_grade)," individus dans la simul  avec grade = NA"))
deleted_id = Reduce(union, list(list_pbl_id1, list_pbl_id2, list_pbl_ib, list_pbl_grade))
data_sim = data_sim[which(!is.element(data_sim$ident, deleted_id)), ]
simul_py = simul_py[which(!is.element(simul_py$ident, deleted_id)), ]
print(paste0("Il y a ",length(unique(data_sim$ident))," individus dans la base en ", annee+1))
}
# Merge
list_var_kept1 = c("ident",  "sexe", "generation", "an_aff", "c_cir_2011",
"E_exam", "E_choice", "D_exam", "D_choice", "time")
list_var_kept2 = c("annee", "grade", "echelon", "ib", "anciennete_dans_echelon", "situation")
data_merge = cbind(data_sim[,list_var_kept1], simul_py[, list_var_kept2])
# Increment time
data_merge$time[which(data_merge$situation == "no_exit")] = data_merge$time[which(data_merge$situation == "no_exit")] + 1
data_merge$time[which(data_merge$situation != "no_exit")] = 1
# Recreate variables (duration, thresholds with new time and echelons)
data_merge  =  create_variables(data_merge)
return(data_merge)
}
save_results_simul <- function(output, data_sim, modelname)
{
var = c("grade", "anciennete_dans_echelon", "echelon", "ib", "situation", "I_bothC")
new_var = paste0(c("grade", "anciennete_dans_echelon", "echelon", "ib", "situation", "I_bothC"), "_", modelname )
data_sim[, new_var] = data_sim[, var]
add = data_sim[, c("ident", "annee", new_var)]
# Merge
output = rbind(output, add)
output = output[order(output$ident, output$annee),]
return(output)
}
########## II. Simulation #########
output_global = generate_data_output(data_path)
for (m in 1:6)
{
if (m <= 3){modelname  =  paste0("MNL_", toString(m))}
if (m == 4){modelname = "BG_1"}
if (m == 5){modelname = "MS_1"}
if (m == 6){modelname = "MS_2"}
print(paste0("Simulation for model ", modelname))
for (annee in 2011:2014)
{
print(paste0("Annee ", annee))
if (annee == 2011)
{
data_sim = generate_data_sim(data_path, use = "min")
output = data_sim[, c("ident", "annee", "grade","ib", "anciennete_dans_echelon", "echelon", "I_bothC")]
output = rename(output, c("grade"=paste0("grade_", modelname) ,
"ib"=paste0("ib_", modelname),
"anciennete_dans_echelon"=paste0("anciennete_dans_echelon_", modelname),
"echelon"=paste0("echelon_", modelname),
"I_bothC"=paste0("I_bothC_", modelname)))
output[, paste0("situation_", modelname)] = NA
}
# Prediction of next_situation from estimated model
if (m <= 3){pred =  predict_next_year_MNL(data_sim, model = list_MNL[[m]], modelname)}
if (m == 4){pred =  predict_next_year_byG(data_sim, list(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH4), modelname)}
if (m == 5){pred =  predict_next_year_seq_m1(data_sim, step1_m1, step2_m1, modelname)}
if (m == 6){pred =  predict_next_year_seq_m2(data_sim, step1_m2, step2_m2, modelname)}
# Save prediction for Py simulation
output[which(output$annee == annee), paste0("situation_", modelname)] = pred$yhat
save_prediction_R(data = pred, annee, simul_path, modelname)
# Prediction of next_ib using simulation.py
launch_prediction_Py(annee, modelname)
# Load
simul_py = load_simul_py(annee, modelname)
# Incrementing data_sim for next year
data_sim = increment_data_sim(data_sim, simul_py)
# Save results
output = save_results_simul(output, data_sim, modelname)
}
output_global = merge(output_global, output, by = c("ident", "annee"), all.x = T)
}
save(output_global, file = paste0(simul_path, "predictions4.Rdata"))
## II. 3 Individuals  ####
# Ecart predit/observé pour grade et ib
list_pbl =  ""
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1" ,"MS_2" ))
{
var = paste0("ib_", m)
list_pbl_id = unique(output_global$ident[which(is.na(output_global[, var]))])
list_pbl = c(list_pbl, list_pbl_id)
list_pbl = unique(list_pbl)
}
output_global_cleared = output_global[which(!is.element(output_global$ident, list_pbl)),]
table_ind = function(data, var_ib, var_situation)
{
data = data[which(data$annee > 2011), ]
data$ib_obs = data[, "ib"]
data$situation_obs = data[, "situation"]
data$ib_sim = data[, var_ib]
data$situation_sim = data[, var_situation]
data$diff_ib = abs(data$ib_sim - data$ib_obs)
data$diff_ib_pct = abs(data$ib_sim - data$ib_obs)/data$ib_obs
table = numeric(12)
# Proportion same situation
table[1] = length(which(data$situation_obs == data$situation_sim))/length(data$situation_obs)
list = which(data$situation_obs == "no_exit")
table[2] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
list = which(data$situation_obs == "exit_next")
table[3] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
list = which(data$situation_obs == "exit_oth")
table[4] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
# Ecart ib
table[5] = mean(data$diff_ib, na.rm = T)
table[6:7] = as.numeric(quantile(data$diff_ib, na.rm = T)[3:4])
table[8] = mean(data$diff_ib_pct, na.rm = T)
table[9:10] = as.numeric(quantile(data$diff_ib_pct, na.rm = T)[3:4])
table[11] = mean(data$diff_ib[which(data$annee == 2012)], na.rm = T)
table[12] = mean(data$diff_ib[which(data$annee == 2015)], na.rm = T)
return(table)
}
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ,"MS_2" ))
{
table = table_ind(data = output_global_cleared, var_ib = paste0("ib_", m) , var_situation = paste0("situation_", m) )
assign(paste0("table_ind_", m), table)
}
table_all = cbind(table_ind_MNL_1, table_ind_MNL_2, table_ind_MNL_3, table_ind_BG_1, table_ind_MS_1, table_ind_MS_2)
colnames(table_ind_MNL_2, = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table_ind) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth"
)
print(xtable(table,nrow = nrow(table), align = "l|c|ccccc",
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
rownames(table_ind) = c("\\% bonne prediction", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction quand obs = exit next",
"\\% bonne prediction quand obs = exit oth",
"Ecart IB moyen", "Q1 ecart IB ", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q1 ecart IB  (pct) ", "Q2 ecart IB  (pct) ","Q3 ecart IB  (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014")
table_all = cbind(table_ind_MNL_1, table_ind_MNL_2, table_ind_MNL_3, table_ind_BG_1, table_ind_MS_1, table_ind_MS_2)
colnames(table_all, = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table_all) = c("\\% bonne prediction", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction quand obs = exit next",
"\\% bonne prediction quand obs = exit oth",
"Ecart IB moyen", "Q1 ecart IB ", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q1 ecart IB  (pct) ", "Q2 ecart IB  (pct) ","Q3 ecart IB  (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ,"MS_2" ))
{
table = table_ind(data = output_global_cleared, var_ib = paste0("ib_", m) , var_situation = paste0("situation_", m) )
assign(paste0("table_ind_", m), table)
}
table_all = cbind(table_ind_MNL_1, table_ind_MNL_2, table_ind_MNL_3, table_ind_BG_1, table_ind_MS_1, table_ind_MS_2)
table_all
colnames(table_all) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" ,"MS\\_2" )
rownames(table_all) = c("\\% bonne prediction", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction quand obs = exit next",
"\\% bonne prediction quand obs = exit oth",
"Ecart IB moyen", "Q1 ecart IB ", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q1 ecart IB  (pct) ", "Q2 ecart IB  (pct) ","Q3 ecart IB  (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014")
print(xtable(table,nrow = nrow(table), align = "l|c|ccccc",
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
length(c("\\% bonne prediction", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction quand obs = exit next",
"\\% bonne prediction quand obs = exit oth",
"Ecart IB moyen", "Q1 ecart IB ", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q1 ecart IB  (pct) ", "Q2 ecart IB  (pct) ","Q3 ecart IB  (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014"))
table
as.numeric(quantile(data$diff_ib_pct, na.rm = T)
quantile(data$diff_ib_pct, na.rm = T)
rownames(table_all) = c("\\% bonne prediction", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction quand obs = exit next",
"\\% bonne prediction quand obs = exit oth",
"Ecart IB moyen", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q2 ecart IB (pct)","Q3 ecart IB (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014")
print(xtable(table,nrow = nrow(table), align = "l|c|ccccc",
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12),
only.contents=F, include.colnames = T)
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 4, 8, 12),
only.contents=F, include.colnames = T)
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 4, 7, 9, 12),
only.contents=F, include.colnames = T)
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 4, 7, 10, 12),
only.contents=F, include.colnames = T)
table_ind = function(data, var_ib, var_situation)
{
data = data[which(data$annee > 2011), ]
data$ib_obs = data[, "ib"]
data$situation_obs = data[, "situation"]
data$ib_sim = data[, var_ib]
data$situation_sim = data[, var_situation]
data$diff_ib = abs(data$ib_sim - data$ib_obs)
data$diff_ib_pct = 100*abs(data$ib_sim - data$ib_obs)/data$ib_obs
table = numeric(12)
# Proportion same situation
table[1] = length(which(data$situation_obs == data$situation_sim))/length(data$situation_obs)
list = which(data$situation_obs == "no_exit")
table[2] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
list = which(data$situation_obs == "exit_next")
table[3] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
list = which(data$situation_obs == "exit_oth")
table[4] = length(which(data$situation_obs[list] == data$situation_sim[list]))/length(list)
# Ecart ib
table[5] = mean(data$diff_ib, na.rm = T)
table[6:7] = as.numeric(quantile(data$diff_ib, na.rm = T)[3:4])
table[8] = mean(data$diff_ib_pct, na.rm = T)
table[9:10] = as.numeric(quantile(data$diff_ib_pct, na.rm = T)[3:4])
table[11] = mean(data$diff_ib[which(data$annee == 2012)], na.rm = T)
table[12] = mean(data$diff_ib[which(data$annee == 2015)], na.rm = T)
return(table)
}
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ,"MS_2" ))
{
table = table_ind(data = output_global_cleared, var_ib = paste0("ib_", m) , var_situation = paste0("situation_", m) )
assign(paste0("table_ind_", m), table)
}
table_all = cbind(table_ind_MNL_1, table_ind_MNL_2, table_ind_MNL_3, table_ind_BG_1, table_ind_MS_1, table_ind_MS_2)
colnames(table_all) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" ,"MS\\_2" )
rownames(table_all) = c("\\% bonne prediction etat", "\\% bonne prediction quand obs = no exit",
"\\% bonne prediction etat quand obs = exit next",
"\\% bonne prediction etat quand obs = exit oth",
"Ecart IB moyen", "Q2 ecart IB ","Q3 ecart IB ",
"Ecart IB moyen (pct)", "Q2 ecart IB (pct)","Q3 ecart IB (pct)",
"Ecart IB moyen en 2011","Ecart IB moyen en 2014")
print(xtable(table_all,nrow = nrow(table_all), align = "l|c|ccccc",
ncol=ncol(table_all)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 4, 7, 10, 12),
only.contents=F, include.colnames = T)
