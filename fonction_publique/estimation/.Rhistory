list = which(data$c_cir_2011 == list_grade[g])
table[3*g+1] = mean(data$gain_ib[list], na.rm = T)
table[3*g+2] = median(data$gain_ib_pct[list], na.rm = T)
table[3*g+3] = 100*mean(data$I_gain[list], na.rm = T)
}
list = which(data$var_situation == "no_exit")
table[16] = mean(data$gain_ib[list], na.rm = T)
table[17] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_next")
table[18] = mean(data$gain_ib[list], na.rm = T)
table[19] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_oth")
table[20] = mean(data$gain_ib[list], na.rm = T)
table[21] = 100*mean(data$I_gain[list], na.rm = T)
return(table)
}
obs = table_gain_ib(output_global, "ib", "situation")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_gain_ib(data = output_global, var_ib = paste0("ib_", m) , paste0("situation_", m) )
assign(paste0("table_", m), table)
}
table = cbind(obs,table_MNL_1, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table) = c('Observed', "MNL_2", "MNL_3", "BG_1","MS_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no_exit", "\\% gain ib > 0 no_exit",
"gain ib moyen exit_next", "\\% gain ib > 0 exit_next",
"gain ib moyen exit_oth", "\\% gain ib > 0 exit_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
output_global = generate_data_output(data_path)
for (m in 1:5)
{
if (m <= 3){modelname  =  paste0("MNL_", toString(m))}
if (m == 4){modelname = "BG_1"}
if (m == 5){modelname = "MS_1"}
print(paste0("Simulation for model ", modelname))
for (annee in 2011:2014)
{
if (annee == 2011)
{
data_sim = generate_data_sim(data_path, use = "min")
output = data_sim[, c("ident", "annee", "grade","ib", "anciennete_dans_echelon", "echelon")]
output = rename(output, c("grade"=paste0("grade_", modelname) ,
"ib"=paste0("ib_", modelname),
"anciennete_dans_echelon"=paste0("anciennete_dans_echelon_", modelname),
"echelon"=paste0("echelon_", modelname)))
output[, paste0("situation_", modelname)] = NA
}
# Prediction of next_situation from estimated model
if (m <= 3){pred =  predict_next_year_MNL(data_sim, model = list_MNL[[m]], modelname)}
if (m == 4){pred =  predict_next_year_byG(data_sim, list(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH4), modelname)}
if (m == 5){pred =  predict_next_year_seq(data_sim, step1, step2, modelname)}
# Save prediction for Py simulation
output[which(output$annee == annee), paste0("situation_", modelname)] = pred$yhat
save_prediction_R(data = pred, annee, simul_path, modelname)
# Prediction of next_ib using simulation.py
launch_prediction_Py(annee, modelname)
# Load
simul_py = load_simul_py(annee, modelname)
# Incrementing data_sim for next year
data_sim = increment_data_sim(data_sim, simul_py)
# Save results
output = save_results_simul(output, data_sim, modelname)
}
output_global = merge(output_global, output, by = c("ident", "annee"), all.x = T)
}
save(output_global, file = paste0(simul_path, "predictions.Rdata"))
table_gain_ib = function(data, var_ib, var_situation)
{
data$var_ib = data[, var_ib]
data$var_situation = data[, var_situation]
data$next_ib = ave(data$var_ib, data$ident, FUN = shift1)
data$gain_ib = data$next_ib - data$var_ib
data$I_gain = ifelse(data$gain_ib >0, 1, 0)
data$gain_ib_pct = 100*(data$gain_ib)/data$var_ib
data = data[which(data$annee < 2015),]
table = numeric(21)
table[1] = mean(data$gain_ib, na.rm = T)
table[2] = median(data$gain_ib_pct, na.rm = T)
table[3] = 100*mean(data$I_gain, na.rm = T)
list_grade = c("TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
list = which(data$c_cir_2011 == list_grade[g])
table[3*g+1] = mean(data$gain_ib[list], na.rm = T)
table[3*g+2] = median(data$gain_ib_pct[list], na.rm = T)
table[3*g+3] = 100*mean(data$I_gain[list], na.rm = T)
}
list = which(data$var_situation == "no_exit")
table[16] = mean(data$gain_ib[list], na.rm = T)
table[17] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_next")
table[18] = mean(data$gain_ib[list], na.rm = T)
table[19] = 100*mean(data$I_gain[list], na.rm = T)
list = which(data$var_situation == "exit_oth")
table[20] = mean(data$gain_ib[list], na.rm = T)
table[21] = 100*mean(data$I_gain[list], na.rm = T)
return(table)
}
obs = table_gain_ib(output_global, "ib", "situation")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_gain_ib(data = output_global, var_ib = paste0("ib_", m) , paste0("situation_", m) )
assign(paste0("table_", m), table)
}
table = cbind(obs,table_MNL_1, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table) = c('Observed', "MNL_2", "MNL_3", "BG_1","MS_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no_exit", "\\% gain ib > 0 no_exit",
"gain ib moyen exit_next", "\\% gain ib > 0 exit_next",
"gain ib moyen exit_oth", "\\% gain ib > 0 exit_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
check_old = table
output_global = generate_data_output(data_path)
for (m in 1:5)
{
if (m <= 3){modelname  =  paste0("MNL_", toString(m))}
if (m == 4){modelname = "BG_1"}
if (m == 5){modelname = "MS_1"}
print(paste0("Simulation for model ", modelname))
for (annee in 2011:2014)
{
if (annee == 2011)
{
data_sim = generate_data_sim(data_path, use = "min")
output = data_sim[, c("ident", "annee", "grade","ib", "anciennete_dans_echelon", "echelon")]
output = rename(output, c("grade"=paste0("grade_", modelname) ,
"ib"=paste0("ib_", modelname),
"anciennete_dans_echelon"=paste0("anciennete_dans_echelon_", modelname),
"echelon"=paste0("echelon_", modelname)))
output[, paste0("situation_", modelname)] = NA
}
# Prediction of next_situation from estimated model
if (m <= 3){pred =  predict_next_year_MNL(data_sim, model = list_MNL[[m]], modelname)}
if (m == 4){pred =  predict_next_year_byG(data_sim, list(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH4), modelname)}
if (m == 5){pred =  predict_next_year_seq(data_sim, step1, step2, modelname)}
# Save prediction for Py simulation
output[which(output$annee == annee), paste0("situation_", modelname)] = pred$yhat
save_prediction_R(data = pred, annee, simul_path, modelname)
# Prediction of next_ib using simulation.py
launch_prediction_Py(annee, modelname)
# Load
simul_py = load_simul_py(annee, modelname)
# Incrementing data_sim for next year
data_sim = increment_data_sim(data_sim, simul_py)
# Save results
output = save_results_simul(output, data_sim, modelname)
}
output_global = merge(output_global, output, by = c("ident", "annee"), all.x = T)
}
save(output_global, file = paste0(simul_path, "predictions2.Rdata"))
# Deleting individuals with pbl
if (length(data_sim$ident) != length(simul_py$ident) | length(which(is.na(simul_py$ib)) >0 )  | length(which(is.na(simul_py$grade)) >0 ))
{
list_pbl_id = unique(setdiff(data_sim$ident, simul_py$ident))
print(paste0("Il y a ",length(list_pbl_id)," prÃ©sents dans data_sim et absent dans simul"))
list_pbl_ib = unique(simul_py$ident[which(is.na(simul_py$ib))])
print(paste0("Il y a ",length(list_pbl_ib)," individus dans la simul  avec ib = NA"))
list_pbl_grade = unique(simul_py$ident[which(is.na(simul_py$grade) | simul_py$grade == "nan")])
print(paste0("Il y a ",length(list_pbl_grade)," individus dans la simul  avec grade = NA"))
deleted_id = Reduce(union, list(list_pbl_id, list_pbl_ib, list_pbl_grade))
data_sim = data_sim[which(!is.element(data_sim$ident, deleted_id)), ]
simul_py = simul_py[which(!is.element(simul_py$ident, deleted_id)), ]
print(paste0("Il y a ",length(unique(data_sim$ident))," individus dans la base en ", annee+1))
}
length(simul_py$ident)
(length(data_sim$ident)
(length(data_sim$ident))
check_old
View(table)
View(table)
table = cbind(obs,table_MNL_1, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table) = c('Observed', "MNL_1", "MNL_2", "MNL_3", "BG_1","MS_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no_exit", "\\% gain ib > 0 no_exit",
"gain ib moyen exit_next", "\\% gain ib > 0 exit_next",
"gain ib moyen exit_oth", "\\% gain ib > 0 exit_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
table = cbind(obs,table_MNL_1, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table) = c('Observed', "MNL\_1", "MNL\_2", "MNL\_3", "BG\_1","MS\_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no_exit", "\\% gain ib > 0 no_exit",
"gain ib moyen exit_next", "\\% gain ib > 0 exit_next",
"gain ib moyen exit_oth", "\\% gain ib > 0 exit_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
colnames(table) = c('Observed', "MNL\_1", "MNL\_2", "MNL\_3", "BG\_1","MS\_1" )
colnames(table) = c('Observed', "MNL\\_1", "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
colnames(table) = c('Observed', "MNL\\_1", "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no_exit", "\\% gain ib > 0 no_exit",
"gain ib moyen exit_next", "\\% gain ib > 0 exit_next",
"gain ib moyen exit_oth", "\\% gain ib > 0 exit_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
obs = table_masse_ib(output_global, "ib")
obs
obs = table_masse_ib(output_global, "ib")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_masse_ib(data = output_global, var_ib = paste0("ib_", m))
assign(paste0("table_", m), table)
}
table = cbind(obs, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
table = cbind(obs, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("Masse totale 2011-2015 (en 1e6)", "Masse totale 2012 (en 1e6)",  "Masse totale 2015 (en 1e6)",
"Masse totale 2011-2015 TTH1 (en 1e6)", "Masse totale 2012 TTH1  (en 1e6)",  "Masse totale 2015 TTH1  (en 1e6)",
"Masse totale 2011-2015 TTH2 (en 1e6)", "Masse totale 2012 TTH2  (en 1e6)",  "Masse totale 2015 TTH2  (en 1e6)",
"Masse totale 2011-2015 TTH3 (en 1e6)", "Masse totale 2012 TTH3  (en 1e6)",  "Masse totale 2015 TTH3  (en 1e6)",
"Masse totale 2011-2015 TTH4 (en 1e6)", "Masse totale 2012 TTH4  (en 1e6)",  "Masse totale 2015 TTH4  (en 1e6)",
)
rownames(table) = c("Masse totale 2011-2015 (en 1e6)", "Masse totale 2012 (en 1e6)",  "Masse totale 2015 (en 1e6)",
"Masse totale 2011-2015 TTH1 (en 1e6)", "Masse totale 2012 TTH1  (en 1e6)",  "Masse totale 2015 TTH1  (en 1e6)",
"Masse totale 2011-2015 TTH2 (en 1e6)", "Masse totale 2012 TTH2  (en 1e6)",  "Masse totale 2015 TTH2  (en 1e6)",
"Masse totale 2011-2015 TTH3 (en 1e6)", "Masse totale 2012 TTH3  (en 1e6)",  "Masse totale 2015 TTH3  (en 1e6)",
"Masse totale 2011-2015 TTH4 (en 1e6)", "Masse totale 2012 TTH4  (en 1e6)",  "Masse totale 2015 TTH4  (en 1e6)"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15),
only.contents=F, include.colnames = T)
table_masse_ib = function(data, var_ib)
{
data$var_ib = data[, var_ib]
table = numeric(1)
table[1] = sum(data$var_ib)/1e6
table[2] = sum(data$var_ib[which(data$annee == 2012)])/1e6
table[3] = sum(data$var_ib[which(data$annee == 2015)])/1e6
list_grade = c("TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
table[3*g+1] = sum(data$var_ib[which(data$c_cir_2011 == list_grade[g])])/1e6
table[3*g+2] = sum(data$var_ib[which(data$annee == 2012 & data$c_cir_2011 == list_grade[g])])/1e6
table[3*g+3] = sum(data$var_ib[which(data$annee == 2015 & data$c_cir_2011 == list_grade[g])])/1e6
}
return(table)
}
obs = table_masse_ib(output_global, "ib")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_masse_ib(data = output_global, var_ib = paste0("ib_", m))
assign(paste0("table_masse_", m), table)
}
table = cbind(obs, table_masse_MNL_2, table_masse_MNL_3, table_masse_BG_1, table_masse_MS_1)
colnames(table) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("Masse totale 2011-2015 (en 1e6)", "Masse totale 2012 (en 1e6)",  "Masse totale 2015 (en 1e6)",
"Masse totale 2011-2015 TTH1 (en 1e6)", "Masse totale 2012 TTH1  (en 1e6)",  "Masse totale 2015 TTH1  (en 1e6)",
"Masse totale 2011-2015 TTH2 (en 1e6)", "Masse totale 2012 TTH2  (en 1e6)",  "Masse totale 2015 TTH2  (en 1e6)",
"Masse totale 2011-2015 TTH3 (en 1e6)", "Masse totale 2012 TTH3  (en 1e6)",  "Masse totale 2015 TTH3  (en 1e6)",
"Masse totale 2011-2015 TTH4 (en 1e6)", "Masse totale 2012 TTH4  (en 1e6)",  "Masse totale 2015 TTH4  (en 1e6)"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15),
only.contents=F, include.colnames = T)
var_ib = paste0("ib_", m)
var_ib
names(output_global)
load(paste0(simul_path, "predictions.Rdata"))
names(output_global)
obs = table_masse_ib(output_global, "ib")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_masse_ib(data = output_global, var_ib = paste0("ib_", m))
assign(paste0("table_masse_", m), table)
}
table = cbind(obs, table_masse_MNL_2, table_masse_MNL_3, table_masse_BG_1, table_masse_MS_1)
colnames(table) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("Masse totale 2011-2015 (en 1e6)", "Masse totale 2012 (en 1e6)",  "Masse totale 2015 (en 1e6)",
"Masse totale 2011-2015 TTH1 (en 1e6)", "Masse totale 2012 TTH1  (en 1e6)",  "Masse totale 2015 TTH1  (en 1e6)",
"Masse totale 2011-2015 TTH2 (en 1e6)", "Masse totale 2012 TTH2  (en 1e6)",  "Masse totale 2015 TTH2  (en 1e6)",
"Masse totale 2011-2015 TTH3 (en 1e6)", "Masse totale 2012 TTH3  (en 1e6)",  "Masse totale 2015 TTH3  (en 1e6)",
"Masse totale 2011-2015 TTH4 (en 1e6)", "Masse totale 2012 TTH4  (en 1e6)",  "Masse totale 2015 TTH4  (en 1e6)"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15),
only.contents=F, include.colnames = T)
m
table_masse_ib(data = output_global, var_ib = paste0("ib_", m))
data = output_global
var_ib = paste0("ib_", m)
data$var_ib = data[, var_ib]
data$var_ib
print(paste0("Il y a "(length(which(is.na(data$var_ib))))," obs avec ib = NA, que l'on supprime"  ))
print(paste0("Il y a ",(length(which(is.na(data$var_ib))))," obs avec ib = NA, que l'on supprime"  ))
data = data[which(!is.na(data$var_ib)),]
table_masse_ib = function(data, var_ib)
{
data$var_ib = data[, var_ib]
print(paste0("Il y a ",(length(which(is.na(data$var_ib))))," obs avec ib = NA, que l'on supprime"  ))
data = data[which(!is.na(data$var_ib)),]
table = numeric(1)
table[1] = sum(data$var_ib)/1e6
table[2] = sum(data$var_ib[which(data$annee == 2012)])/1e6
table[3] = sum(data$var_ib[which(data$annee == 2015)])/1e6
list_grade = c("TTH1", "TTH2", "TTH3", "TTH4")
for (g in 1:length(list_grade))
{
table[3*g+1] = sum(data$var_ib[which(data$c_cir_2011 == list_grade[g])])/1e6
table[3*g+2] = sum(data$var_ib[which(data$annee == 2012 & data$c_cir_2011 == list_grade[g])])/1e6
table[3*g+3] = sum(data$var_ib[which(data$annee == 2015 & data$c_cir_2011 == list_grade[g])])/1e6
}
return(table)
}
obs = table_masse_ib(output_global, "ib")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_masse_ib(data = output_global, var_ib = paste0("ib_", m))
assign(paste0("table_masse_", m), table)
}
table = cbind(obs, table_masse_MNL_2, table_masse_MNL_3, table_masse_BG_1, table_masse_MS_1)
colnames(table) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("Masse totale 2011-2015 (en 1e6)", "Masse totale 2012 (en 1e6)",  "Masse totale 2015 (en 1e6)",
"Masse totale 2011-2015 TTH1 (en 1e6)", "Masse totale 2012 TTH1  (en 1e6)",  "Masse totale 2015 TTH1  (en 1e6)",
"Masse totale 2011-2015 TTH2 (en 1e6)", "Masse totale 2012 TTH2  (en 1e6)",  "Masse totale 2015 TTH2  (en 1e6)",
"Masse totale 2011-2015 TTH3 (en 1e6)", "Masse totale 2012 TTH3  (en 1e6)",  "Masse totale 2015 TTH3  (en 1e6)",
"Masse totale 2011-2015 TTH4 (en 1e6)", "Masse totale 2012 TTH4  (en 1e6)",  "Masse totale 2015 TTH4  (en 1e6)"
)
print(xtable(table,nrow = nrow(table),
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15),
only.contents=F, include.colnames = T)
table_obs =  movers_characteristics(output_global, exit_var = "situation")
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1"))
{
var = paste0("situation_", m)
table     = movers_characteristics(output_global, exit_var = var)
assign(paste0("table_", m), table)
}
table_movers = cbind(table_obs, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table_movers) = c('Observed', "MNL_2", "MNL_3", "BG_1", "MS_1")
rownames(table_movers) = c("\\% exit next All", "\\% exit oth All",
"\\% Women when exit next", "\\% Women when exit oth",
"Mean age when exit next", "Mean age  when exit oth",
"\\% exit next TTH1", "\\% exit oth TTH1", "\\% exit next TTH2", "\\% exit oth TTH2",
"\\% exit next TTH3", "\\% exit oth TTH3", "\\% exit next TTH4", "\\% exit oth TTH4",
"Mean IB when exit next", "Q1 IB when exit next", "Q2 IB when exit next","Q3 IB when exit next",
"Mean IB when exit oth", "Q1 IB when exit oth", "Q2 IB when exit oth","Q3 IB when exit oth")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*14),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers),
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 14, 18),
only.contents=F, include.colnames = T)
table_movers = cbind(table_obs, table_MNL_2, table_MNL_3, table_BG_1, table_MS_1)
colnames(table_movers) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1", "MS\\_1")
rownames(table_movers) = c("\\% exit next All", "\\% exit oth All",
"\\% Women when exit next", "\\% Women when exit oth",
"Mean age when exit next", "Mean age  when exit oth",
"\\% exit next TTH1", "\\% exit oth TTH1", "\\% exit next TTH2", "\\% exit oth TTH2",
"\\% exit next TTH3", "\\% exit oth TTH3", "\\% exit next TTH4", "\\% exit oth TTH4",
"Mean IB when exit next", "Q1 IB when exit next", "Q2 IB when exit next","Q3 IB when exit next",
"Mean IB when exit oth", "Q1 IB when exit oth", "Q2 IB when exit oth","Q3 IB when exit oth")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*14),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers),
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 14, 18),
only.contents=F, include.colnames = T)
? xtable
obs = table_gain_ib(output_global, "ib", "situation")
for (m in c("MNL_1","MNL_2", "MNL_3", "BG_1","MS_1" ))
{
table = table_gain_ib(data = output_global, var_ib = paste0("ib_", m) , paste0("situation_", m) )
assign(paste0("table_gain_", m), table)
}
table = cbind(obs, table_gain_MNL_2, table_gain_MNL_3, table_gain_BG_1, table_gain_MS_1)
colnames(table) = c('Observed', "MNL\\_2", "MNL\\_3", "BG\\_1","MS\\_1" )
rownames(table) = c("gain ib moyen", "gain ib median en \\%", "\\% gain ib > 0",
"gain ib moyen TTH1", "gain ib median en \\% TTH1", "\\% gain ib > 0  TTH1",
"gain ib moyen TTH2", "gain ib median en \\% TTH2", "\\% gain ib > 0  TTH2",
"gain ib moyen TTH3", "gain ib median en \\% TTH3", "\\% gain ib > 0 TTH3",
"gain ib moyen TTH4", "gain ib median en \\% TTH4", "\\% gain ib > 0 TTH4",
"gain ib moyen no\\_exit", "\\% gain ib > 0 no\\_exit",
"gain ib moyen exit\\_next", "\\% gain ib > 0 exit\\_next",
"gain ib moyen exit\\_oth", "\\% gain ib > 0 exit\\_oth"
)
print(xtable(table,nrow = nrow(table), align = "l|c|cccc",
ncol=ncol(table_movers)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 3, 6, 9, 12, 15, 17, 19, 21),
only.contents=F, include.colnames = T)
source(paste0(wd, "0_Outils_CNRACL.R"))
datasets = load_and_clean(data_path, "/filter/data_ATT_2011_filtered_after_duration_var_added_new.csv")
data_max = datasets[[1]]
data_min = datasets[[2]]
data_stat = data_min[which(data_min$left_censored == F & data_min$annee <= 2014),]
datai     =  data_min[which(data_min$annee == 2011),]
compute_transitions_next <- function(data, grade)
{
data = data[which(data$c_cir_2011 == grade & data$annee == 2011),]
table_exit = numeric(12)
# % in each possible next_grade_situation
table_exit[1] = round(length(which(data$next_grade_situation == "no_exit"))*100/length(data$next_grade_situation),2)
table_exit[2] = round(length(which(data$next_grade_situation == "exit_next"))*100/length(data$next_grade_situation),2)
table_exit[3] = round(length(which(data$next_grade_situation == "exit_oth"))*100/length(data$next_grade_situation),2)
# From other known neg
data_exit_oth = data[which(data$next_grade_situation == "exit_oth"), ]
t = as.data.frame(table(data_exit_oth$grade_next)*100/length(data_exit_oth$grade_next))
t = t[order(-t$Freq),]
for (n in 1:4){
table_exit[3+2*n-1] = toString(t[n,1])
table_exit[3+2*n] = round(t[n,2],2)
}
table_exit[12] = length(which(t$Freq >0))
return(table_exit)
}
table1 = compute_transitions_next(data_stat, "TTH1")
table2 = compute_transitions_next(data_stat, "TTH2")
table3 = compute_transitions_next(data_stat, "TTH3")
table4 = compute_transitions_next(data_stat, grade = "TTH4")
table = cbind(table1, table2, table3, table4)
colnames(table) <-  c("TTH1", "TTH2", "TTH3", "TTH4")
rownames(table) <-  c("\\% no exit", "\\% exit next", "\\% exit oth",
"\\hfill 1st oth grade ", "\\hfill  \\% 1st oth",
"\\hfill 2nd oth grade ", "\\hfill  \\% 2nd oth",
"\\hfill 3rd oth grade ", "\\hfill  \\% 3rd oth",
"\\hfill 4th oth grade ", "\\hfill  \\% 4th oth",
"Nb oth grades")
as.numeric(table[c(1,2,3,5,7,9,11), ]) <- as.numeric(table[c(1,2,3,5,7,9,11), ])
print(xtable(table),
sanitize.text.function=identity,size="\\footnotesize")
## I.1 Compute exit rates and drawing plot ####
# Obs
exit_obs      = extract_exit(output_global, "situation")
exit_obs_TTH1 = extract_exit(output_global[which(output_global$c_cir_2011 == "TTH1"), ], "situation")
exit_obs_TTH2 = extract_exit(output_global[which(output_global$c_cir_2011 == "TTH2"), ], "situation")
exit_obs_TTH3 = extract_exit(output_global[which(output_global$c_cir_2011 == "TTH3"), ], "situation")
exit_obs_TTH4 = extract_exit(output_global[which(output_global$c_cir_2011 == "TTH4"), ], "situation")
p_obs = plot_share(exit_obs, plot = F, title = "Obs")
p_obs_TTH1 =  plot_share(exit_obs_TTH1, plot = F, title = "Obs")
p_obs_TTH2 =  plot_share(exit_obs_TTH2, plot = F, title = "Obs")
p_obs_TTH3 =  plot_share(exit_obs_TTH3, plot = F, title = "Obs")
p_obs_TTH4 =  plot_share(exit_obs_TTH4, plot = F, title = "Obs")
# Sim
for (m in c("MNL_2", "MNL_3", "BG_1","MS_1" ))
{
var = paste0("situation_", m)
exit     = extract_exit(output_global, exit_var = var)
p = plot_share(exit_obs, plot = F, title = m)
assign(paste0("exit_", m), exit)
assign(paste0("p_", m), p)
for (g in c("TTH1", "TTH2", "TTH3", "TTH4"))
{
exit = extract_exit(output_global[which(output_global$c_cir_2011 == g), ], var)
p = plot_share(exit, plot = F, title = m)
assign(paste0("exit_", m,"_",g), exit)
assign(paste0("p_", m,"_",g), p)
}
}
p
p_obs
pdf(paste0(fig_path,"exit_obs_all.pdf"))
p_obs
dev.off()
grid_arrange_shared_legend(p_obs_TTH1,p_MNL_2_TTH1, p_MNL_3_TTH1, p_BG_1_TTH1, p_MS_1_TTH1)
