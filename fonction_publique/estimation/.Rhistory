return(output)
}
output_global = generate_data_output(data_path)
for (m in 3:5)
{
if (m <= 3){modelname  =  paste0("MNL_", toString(m))}
if (m == 4){modelname = "BG_1"}
if (m == 5){modelname = "MS_1"}
print(paste0("Simulation for model ", modelname))
for (annee in 2011:2014)
{
if (annee == 2011)
{
data_sim = generate_data_sim(data_path, use = "min")
output = data_sim[, c("ident", "annee", "grade","ib", "anciennete_dans_echelon", "echelon")]
output = rename(output, c("grade"=paste0("grade_", modelname) ,
"ib"=paste0("ib_", modelname),
"anciennete_dans_echelon"=paste0("anciennete_dans_echelon_", modelname),
"echelon"=paste0("echelon_", modelname)))
output[, paste0("situation_", modelname)] = NA
}
# Prediction of next_situation from estimated model
if (m <= 3){pred =  predict_next_year_MNL(data_sim, model = list_MNL[[m]], modelname)}
if (m == 4){pred =  predict_next_year_byG(data_sim, list(m1_TTH1, m1_TTH2, m1_TTH3, m1_TTH4), modelname)}
if (m == 5){pred =  predict_next_year_seq(data_sim, step1, step2, modelname)}
# Save prediction for Py simulation
output[which(output$annee == annee), paste0("situation_", modelname)] = pred$yhat
save_prediction_R(data = pred, annee, simul_path, modelname)
# Prediction of next_ib using simulation.py
launch_prediction_Py(annee, modelname)
# Load
simul_py = load_simul_py(annee, modelname)
# Incrementing data_sim for next year
data_sim = increment_data_sim(data_sim, simul_py)
# Save results
output = save_results_simul(output, data_sim, modelname)
}
output_global = merge(output_global, output, by = c("ident", "annee"), all.x = T)
}
View(output_global)
data_long$situation = data_long$next_grade_situation
data_long$situation = data_long$next_grade_situation
list_var = c("ident", "annee", "grade","ib", "echelon", "situation")
output = data_long[which(data_long$annee >= 2011 & data_long$annee <= 2015), list_var]
output_global$situation = data_long$situation
output_global$situation = output$situation
save(output_global, file = paste0(simul_path, "predictions.Rdata"))
data = output_global
var = "situation"
data$var = data[, var]
data$I_noexit = ifelse(data$var = "no_exit", 1, 0)
data$I_noexit = ifelse(data$var == "no_exit", 1, 0)
data$I_exit_next = ifelse(data$var == "exit_next", 1, 0)
data$I_exit_oth  = ifelse(data$var == "exit_oth", 1, 0)
View(data)
names(data_long)
data_long$change_grade
names(data_long)
data_long$grade_next
data = output_global[var]
data = output_global[, c("ident", "annee", "grade", var]
df <- data.frame(Age=numeric(),Status=numeric(),pct=numeric())
age <- seq(50,65,1)
states   <-  c("emp","ret","cho","mal","inv","ina")
s_titles <-  c("(a) Employment","(b) Retirement","(c) Unemployment","(d) Sickness","(e) Disability","(f) Inactivity")
n_col <- c("#727272","#f1595f","#79c36a","#599ad3", "#f9a65a", "#9e66ab", "#cd7058","#d77fb3")
data$main = 6
data$main[data$main_state == 1] = 1
data$main[data$main_state == 7] = 2
data$main[data$main_state == 3] = 3
data$main[data$main_state == 4] = 4
data$main[data$main_state == 5] = 5
states1 = c(1, 7, 3, 4, 5, 6)
for (s in 1:6)
{
m <- matrix(ncol=3,nrow=length(age))
m[,1] <- s
m[,2] <- age
for (a in 1:length(age))
{
m[a,3]<- length(which(data$age==age[a] & data$main == s))/length(which(data$age==age[a]))
}
df <- rbind(df,as.data.frame(m))
}
names(df) <- c("status","age","pct")
df$status2 <- as.factor(df$status)
# Observed data
data_obs <- read.csv(paste0(data_path, 'data_ATT_2002_2015_with_filter_on_etat_at_exit_and_change_to_filter_on_etat_grade_corrected.csv'))
to_bolean = c("left_censored", "exit_status")
data_obs[, to_bolean] <- sapply(data_obs[, to_bolean], as.logical)
data_obs1 <- subset(data_obs, annee == 2012 & left_censored == F,
select = c("ident", "c_cir", "echelon", "ib", "sexe", "generation",  "exit_status"))
setnames(data_obs1, old = c("ident", "c_cir", "echelon", "ib"),
new = c('ident', 'grade_2012_obs', 'echelon_2012_obs', 'ib_2012_obs'))
data_obs2 <- subset(data_obs, annee == 2011 & left_censored == F, select=c("c_cir", "echelon", "ib"))
setnames(data_obs2, old = c("c_cir", "echelon", "ib"),
new = c('grade_2011_obs', 'echelon_2011_obs', 'ib_2011_obs'))
data = cbind(data_obs1, data_obs2)
data$situation_2012_obs = ifelse(data$exit_status == 0, "no_exit", "exit_oth")
data$situation_2012_obs[which(data$exit_status == 1 & data$grade_2011_obs == "TTH1" & data$grade_2012_obs == "TTH2")] = "exit_next"
data$situation_2012_obs[which(data$exit_status == 1 & data$grade_2011_obs == "TTH2" & data$grade_2012_obs == "TTH3")] = "exit_next"
data$situation_2012_obs[which(data$exit_status == 1 & data$grade_2011_obs == "TTH3" & data$grade_2012_obs == "TTH4")] = "exit_next"
# Correction temporaire
data = data[which(data$echelon_2011_obs != 55555),]
data= setorder(data, ident)
# Simul ib from python
model_names <- c("_m1", "_m2", "_m3")
for (i in model_names)
{
pred <- read.csv(paste0(asset_simulation_path, 'results_modif_regles_replacement/', 'results_2011', i, '.csv'))
pred <- setorder(pred, ident)
# Check:
if (length(which(pred$ident!=data$ident))!=0){print("Pbl: appending different ind"); stop()}
add <- subset(pred, select=c("grade", "echelon", "ib", "situation"))
colnames(add) <- c(paste0(c('grade_2012', 'echelon_2012', 'ib_2012', 'situation_2012'), i))
data <- cbind(data, add)
}
## 2. Exit
# ROC analysis
exit = as.matrix(data[, c("situation_2012_obs", paste0("situation_2012", model_names))])
table_fit = matrix(ncol = length(model_names), nrow = 9)
for (m in 1:length(model_names))
{
c = m+1
table_fit[1, m] =  100*length(which(exit[,c] == "no_exit"))/length(exit[,c])
table_fit[2, m] =   table_fit[1, m]-100*(length(which(exit[,1] == "no_exit"))/length(exit[,1]))
table_fit[3, m] = 100*length(which(exit[,c] == "exit_next"))/length(exit[,c])
table_fit[4, m] =   table_fit[3, m]-100*(length(which(exit[,1] == "exit_next"))/length(exit[,1]))
table_fit[5, m] = 100*length(which(exit[,c] == "exit_oth"))/length(exit[,c])
table_fit[6, m] =   table_fit[5, m]-100*(length(which(exit[,1] == "exit_oth"))/length(exit[,1]))
table_fit[7, m] = 100*length(which(exit[,c] == "no_exit" & exit[,1] == "no_exit"))/length(which(exit[,1] == "no_exit"))
table_fit[8, m] = 100*length(which(exit[,c] == "exit_next" & exit[,1] == "exit_next"))/length(which(exit[,1] == "exit_next"))
table_fit[9, m] = 100*length(which(exit[,c] == "exit_oth" & exit[,1] == "exit_oth"))/length(which(exit[,1] == "exit_oth"))
}
colnames(table_fit) = model_names
rownames(table_fit) = c("Prop of no exit", "Diff with no exit obs",
"Prop of exit next", "Diff with exit next",
"Prop of exit oth", "Diff with exit oth",
"\\% good pred when obs = no exit",
"\\% good pred when obs = exit next",
"\\% good pred when obs = exit oth")
mdigit <- matrix(c(rep(0,(ncol(table_fit)+1)*2),rep(3,(ncol(table_fit)+1)*6)),nrow = nrow(table_fit), ncol=ncol(table_fit)+1, byrow=T)
print(xtable(table_fit,nrow = nrow(table_fit), ncol=ncol(table_fit)+1, byrow=T, digits = 2),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6),
only.contents=F, include.colnames = T)
# Caracteristics of movers
data$age = 2011 - data$generation
data$femme =ifelse(data$sexe == "F", 1, 0)
table_movers = matrix(ncol = length(model_names)+1, nrow = 20)
for (c in 1:4)
{
# All
table_movers[1,c] = 100*length(which(exit[, c] == "exit_next"))/length(exit[,c])
table_movers[2,c] = 100*length(which(exit[, c] == "exit_oth"))/length(exit[,c])
# Women
list = which(data$femme == 1)
table_movers[3,c] = 100*length(which(exit[list, c] == "exit_next"))/length(exit[list,c])
table_movers[4,c] = 100*length(which(exit[list, c] == "exit_oth"))/length(exit[list,c])
# TTH1
list = which(data$grade_2011 == "TTH1")
table_movers[5,c] = 100*length(which(exit[list, c] == "exit_next"))/length(exit[list,c])
table_movers[6,c] = 100*length(which(exit[list, c] == "exit_oth"))/length(exit[list,c])
# TTH2
list = which(data$grade_2011 == "TTH2")
table_movers[7,c] = 100*length(which(exit[list, c] == "exit_next"))/length(exit[list,c])
table_movers[8,c] = 100*length(which(exit[list, c] == "exit_oth"))/length(exit[list,c])
# TTH3
list = which(data$grade_2011 == "TTH3")
table_movers[9,c] = 100*length(which(exit[list, c] == "exit_next"))/length(exit[list,c])
table_movers[10,c] = 100*length(which(exit[list, c] == "exit_oth"))/length(exit[list,c])
# TTH4
list = which(data$grade_2011 == "TTH4")
table_movers[11,c] = 100*length(which(exit[list, c] == "exit_next"))/length(exit[list,c])
table_movers[12,c] = 100*length(which(exit[list, c] == "exit_oth"))/length(exit[list,c])
# IB distrib
list = which(exit[, c] == "exit_next")
table_movers[13,c] = mean(data$ib_2011[list])
table_movers[14:16,c] = as.numeric(quantile(data$ib_2011_obs[list])[2:4])
list = which(exit[, c] == "exit_oth")
table_movers[17,c] = mean(data$ib_2011[list])
table_movers[18:20,c] = as.numeric(quantile(data$ib_2011_obs[list])[2:4])
}
colnames(table_movers) = c('Observed', model_names)
rownames(table_movers) = c("\\% exit next All", "\\% exit oth All", "\\% exit next Women", "\\% exit oth Women",
"\\% exit next TTH1", "\\% exit oth TTH1", "\\% exit next TTH2", "\\% exit oth TTH2",
"\\% exit next TTH3", "\\% exit oth TTH3", "\\% exit next TTH4", "\\% exit oth TTH4",
"Mean IB when exit next", "Q1 IB when exit next", "Q2 IB when exit next","Q3 IB when exit next",
"Mean IB when exit oth", "Q1 IB when exit oth", "Q2 IB when exit oth","Q3 IB when exit oth")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*12),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers),
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 16),
only.contents=F, include.colnames = T)
## 3. IB 2012 ##
ib2012 = as.matrix(data[, c("ib_2012_obs", paste0("ib_2012", model_names))])
# Masse ib
wage_bill = matrix(ncol = length(model_names)+1, nrow = 16)
for (c in 1:4)
{
# All
wage_bill[1,c] = sum(ib2012[,c])/1e6
wage_bill[2,c] = (sum(ib2012[,c])/1e6-sum(ib2012[,1])/1e6)/(sum(ib2012[,1])/1e6)
# TTH1
list = which(data$grade_2011 == "TTH1")
wage_bill[3,c] = sum(ib2012[list ,c])/1e6
wage_bill[4,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
# TTH2
list = which(data$grade_2011 == "TTH2")
wage_bill[5,c] = sum(ib2012[list ,c])/1e6
wage_bill[6,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
# TTH3
list = which(data$grade_2011 == "TTH3")
wage_bill[7,c] = sum(ib2012[list ,c])/1e6
wage_bill[8,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
# TTH4
list = which(data$grade_2011 == "TTH4")
wage_bill[9,c] = sum(ib2012[list ,c])/1e6
wage_bill[10,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
# By next year
list = which(data$situation_2012_obs == "no_exit")
wage_bill[11,c] = sum(ib2012[list ,c])/1e6
wage_bill[12,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
list = which(data$situation_2012_obs == "exit_next")
wage_bill[13,c] = sum(ib2012[list ,c])/1e6
wage_bill[14,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
list = which(data$situation_2012_obs == "exit_oth")
wage_bill[15,c] = sum(ib2012[list ,c])/1e6
wage_bill[16,c] = (sum(ib2012[list,c])/1e6-sum(ib2012[list,1])/1e6)/(sum(ib2012[list,1])/1e6)
}
colnames(table_movers) = c('Observed', model_names)
rownames(table_movers) = c("\\% exit next All", "\\% exit oth All", "\\% exit next Women", "\\% exit oth Women",
"\\% exit next TTH1", "\\% exit oth TTH1", "\\% exit next TTH2", "\\% exit oth TTH2",
"\\% exit next TTH3", "\\% exit oth TTH3", "\\% exit next TTH4", "\\% exit oth TTH4",
"Mean IB when exit next obs", "Q1 IB when exit next obs", "Q2 IB when exit next obs","Q3 IB when exit next obs",
"Mean IB when exit oth obs", "Q1 IB when exit oth obs", "Q2 IB when exit oth obs","Q3 IB when exit oth obs")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*12),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers),
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 16),
only.contents=F, include.colnames = T)
# Distributions
ncolors = c("red", "darkcyan", "blue", "black")
plot (density(as.numeric(ib2012[,1])), col =  ncolors[1], xlim = c(275, 450),
main = "Distribution des IB en 2012")
for (c in 2:ncol(ib2012)){lines (density(as.numeric(ib2012[,c])), col = ncolors[c])}
plot (density(as.numeric(ib2012[which(exit[,1]=="no_exit"),1])), col =  ncolors[1], xlim = c(275, 450),
main = "Distribution des IB en 2012 (pas de changement de grade)")
for (c in 2:ncol(ib2012)){lines (density(as.numeric(ib2012[which(exit[,c]=="no_exit"),c])), col = ncolors[c])}
plot (density(as.numeric(ib2012[which(exit[,1]!="no_exit"),1])), col =  ncolors[1], xlim = c(275, 450),
main = "Distribution des IB en 2012 (changement de grade)")
for (c in 2:ncol(ib2012)){lines (density(as.numeric(ib2012[which(exit[,c]!="no_exit"),c])), col = ncolors[c])}
# Variation d'IB
var_ib2012 = (ib2012 - data$ib_2011_obs)/data$ib_2011_obs
var_ib = matrix(ncol = length(model_names)+1, nrow = 11)
for (c in 1:4)
{
# All
var_ib[1,c] = mean(100*var_ib2012[,c])
# TTH1
list = which(data$grade_2011 == "TTH1")
var_ib[2,c] = mean(100*var_ib2012[list ,c])
# TTH2
list = which(data$grade_2011 == "TTH2")
var_ib[3,c] = mean(100*var_ib2012[list ,c])
# TTH3
list = which(data$grade_2011 == "TTH3")
var_ib[4,c] = mean(100*var_ib2012[list ,c])
# TTH4
list = which(data$grade_2011 == "TTH4")
var_ib[5,c] = mean(100*var_ib2012[list ,c])
# By (predicted) next year
list = which(exit[,c] == "no_exit")
var_ib[6,c] = mean(100*var_ib2012[list ,c])
var_ib[7,c] = median(100*var_ib2012[list ,c])
list = which(exit[,c] == "exit_next")
var_ib[8,c] = mean(100*var_ib2012[list ,c])
var_ib[9,c] = median(100*var_ib2012[list ,c])
list = which(exit[,c] == "exit_oth")
var_ib[10,c] = mean(100*var_ib2012[list ,c])
var_ib[11,c] = median(100*var_ib2012[list ,c])
}
colnames(var_ib) = c('Observed', model_names)
rownames(var_ib) = c("mean \\% increase IB All",
"mean \\% increase IB TTH1", "mean \\% increase IB TTH2",
"mean \\% increase IB TTH3", "mean \\% increase IB TTH4",
"mean\\% increase IB for when no exit", "median\\% increase IB for when no exit",
"mean\\% increase IB for when exit next", "median\\% increase IB for when exit next",
"mean\\% increase IB for when exit oth", "median\\% increase IB for when exit oth")
mdigit <- matrix(c(rep(2,(ncol(table_movers)+1)*12),rep(0,(ncol(table_movers)+1)*8)),
nrow = nrow(table_movers), ncol=ncol(table_movers)+1, byrow=T)
print(xtable(table_movers,nrow = nrow(table_movers),
ncol=ncol(table_movers)+1, byrow=T, digits = mdigit),
sanitize.text.function=identity,size="\\footnotesize", hline.after = c(0, 2, 4, 6, 8, 10, 12, 16),
only.contents=F, include.colnames = T)
hazard= function(sample, type_exit = "all", save = F, name = "")
{
haz  = matrix(ncol = 4, nrow = 4)
list = sample
years = 2011:2014
if (!is.element(type_exit, c("all", "exit_next", "exit_oth"))){print("wrong exit type"); return()}
# All
if (type_exit == "all")
{
for (y in 1:length(years))
{
n = length(list)
haz[1, y] =  length(which(exit_year_obs[list] == years[y]))/length(which(exit_year_obs[list] >= years[y]))
haz[2, y] =  length(which(exit_year_pred[1, list] == years[y]))/length(which(exit_year_pred[1, list] >= years[y]))
haz[3, y] =  length(which(exit_year_pred[2, list] == years[y]))/length(which(exit_year_pred[2, list]  >= years[y]))
haz[4, y] =  length(which(exit_year_pred[3, list] == years[y]))/length(which(exit_year_pred[3, list ] >= years[y]))
}
}
else{
for (y in 1:length(years))
{
n = length(list)
haz[1, y] =  length(which(exit_year_obs[list] == years[y] & exit_route_obs[list] == type_exit))/length(which(exit_year_obs[list] >= (years[y])))
haz[2, y] =  length(which(exit_year_pred[1, list] == years[y] & exit_route_pred[1,list] == type_exit))/length(which(exit_year_pred[1, list] >= years[y]))
haz[3, y] =  length(which(exit_year_pred[2, list] == years[y] & exit_route_pred[2,list] == type_exit))/length(which(exit_year_pred[2, list] >= years[y]))
haz[4, y] =  length(which(exit_year_pred[3, list] == years[y] & exit_route_pred[3,list] == type_exit))/length(which(exit_year_pred[3, list] >= years[y]))
}
}
# Plot
years = 2012:2015
colors = c("black", "darkcyan")
limits = range(haz)
plot(years,rep(NA,length(years)),ylim=limits, ylab="Hazard rate",xlab="Année")
title(name)
lines(years, haz[1,], col =  colors[1], lwd = 3, lty =1)
lines(years, haz[2,], col =  colors[2], lwd = 3, lty = 2)
lines(years, haz[3,], col =  colors[2], lwd = 4, lty = 3)
lines(years, haz[4,], col =  colors[2], lwd = 4, lty =1)
}
hazard(sample = 1:ncol(exit_year_pred), type_exit = "all",       save = F, name = "All")
hazard(sample = 1:ncol(exit_year_pred), type_exit = "exit_next", save = F, name = "Next grade")
hazard(sample = 1:ncol(exit_year_pred), type_exit = "exit_oth",  save = F, name = "Exit corps")
hazard(sample = which(datai$c_cir == "TTH1"), type_exit = "all",       save = F, name = "All exits, TTH1")
hazard(sample = which(datai$c_cir == "TTH1"), type_exit = "exit_next", save = F, name = "Next grade, TTH1")
hazard(sample = which(datai$c_cir == "TTH1"), type_exit = "exit_oth",  save = F, name = "Next grade, TTH1")
hazard(sample = which(datai$c_cir == "TTH2"), type_exit = "all",       save = F, name = "All exits, TTH2")
hazard(sample = which(datai$c_cir == "TTH3"), type_exit = "all",       save = F, name = "All exits, TTH3")
hazard(sample = which(datai$c_cir == "TTH4"), type_exit = "all",       save = F, name = "All exits, TTH4")
hazard(sample = which(datai$c_cir == "TTH2"), type_exit = "exit_next", save = F, name = "Next grade")
hazard(sample = which(datai$c_cir == "TTH3"), type_exit = "exit_next", save = F, name = "Next grade")
hazard(sample = which(datai$c_cir == "TTH4"), type_exit = "exit_next", save = F, name = "Next grade")
hazard(sample = 1:ncol(exit_year_pred), type_exit = "exit_oth",  save = F, name = "All")
data = output_global[, c("ident", "annee", "grade", var]
data = output_global[, c("ident", "annee", "grade", var)]
View(data)
data$var = data[, var]
data$I_noexit = ifelse(data$var == "no_exit", 1, 0)
data$cum_noexit = ave(data$ident, data$I_noexit, FUN = cumsum())
data$cum_noexit = ave(data$ident, data$I_noexit, FUN = cumsum)
data$var = data[, var]
data$I_noexit = ifelse(data$var == "no_exit", 1, 0)
data$cum_noexit = ave(data$ident, data$I_noexit, FUN = cumsum)
data$cum_noexit = ave(data$ident, data$I_noexit, FUN = sum)
data$cum_noexit = ave(data$ident, data$I_noexit, FUN = sum())
data$I_noexit
ave(data$ident, data$I_noexit, FUN = sum)
data$I_noexit
exit = extract_exit(output_global, situation)
exit = extract_exit(output_global, "situation")
names(output_global)
list_var = c("ident", "annee", "c_cir_2011", "grade","ib", "echelon", "situation")
output = data_long[which(data_long$annee >= 2011 & data_long$annee <= 2015), list_var]
output_global$c_cir_2011 = output$c_cir_2011
exit = extract_exit(output_global, "situation")
data = output_global
exit_var =  "situation"
data = data[, c("ident", "annee", "c_cir_2011", exit_var)]
data$exit_var = data[, exit_var]
data$ind_exit      = ifelse(data$exit_var != "no_exit", 1, 0)
data$ind_exit_cum  = ave(data$ind_exit, data$ident, FUN = cumsum)
data$ind_exit_cum2  = ave(data$ind_exit_cum, data$ident, FUN = cumsum)
data$ind_exit_cum2  = ave(data$ind_exit_cum, data$ident, FUN = cumsum)
data$ind_exit_tot   = ave(data$ind_exit, data$ident, FUN = sum)
### PB
data$ind_first_exit  = ifelse(data$ind_exit_cum2 == 1, 1, 0)
data$year_exit = ave((data$ind_first_exit*data$annee), data$ident, FUN = max)
data$year_exit[which(data$year_exit == 0)] = 2014
data2 = data[which(data$annee == data$year_exit ),]
data2$year_exit[which(data2$ind_exit_tot == 0)] = 9999
data2 = data2[, c("ident", "c_cir_2011", "year_exit", "exit_var")]
extract_exit = function(data, exit_var)
{
data = data[, c("ident", "annee", "c_cir_2011", exit_var)]
data$exit_var = data[, exit_var]
data$ind_exit      = ifelse(data$exit_var != "no_exit", 1, 0)
data$ind_exit_cum  = ave(data$ind_exit, data$ident, FUN = cumsum)
data$ind_exit_cum2  = ave(data$ind_exit_cum, data$ident, FUN = cumsum)
data$ind_exit_cum2  = ave(data$ind_exit_cum, data$ident, FUN = cumsum)
data$ind_exit_tot   = ave(data$ind_exit, data$ident, FUN = sum)
### PB
data$ind_first_exit  = ifelse(data$ind_exit_cum2 == 1, 1, 0)
data$year_exit = ave((data$ind_first_exit*data$annee), data$ident, FUN = max)
data$year_exit[which(data$year_exit == 0)] = 2014
data2 = data[which(data$annee == data$year_exit ),]
data2$year_exit[which(data2$ind_exit_tot == 0)] = 9999
data2 = data2[, c("ident", "c_cir_2011", "year_exit", "exit_var")]
return(data2)
}
exit = extract_exit(output_global, "situation")
View(exit)
table(year$exit)
df =  df[rep(seq_len(nrow(df)), each=5),]
View(df)
df = exit
df =  df[rep(seq_len(nrow(df)), each=5),]
View(df)
rep(seq(2011, 2015), n_id)
df = exit
n_id = (nrow(df)
df =  df[rep(seq_len(nrow(df)), each=5),]
df$annee = rep(seq(2011, 2015), n_id)
df = exit
n_id = nrow(df)
df =  df[rep(seq_len(nrow(df)), each=5),]
df$annee = rep(seq(2011, 2015), n_id)
df[1:10,]
View(output_global)
df$state = ifelse(df$annee <= df$year_exit) = 1
df$state = ifelse(df$annee <= df$year_exit, 1, 0)
df$state = ifelse(df$annee <= df$year_exit, 1, 0)
df$state[which(df$exit_var == "exit_next" & df$state == 0)] = 2
df$state[which(df$exit_var == "exit_pth" & df$state == 0)] = 3
View(df)
df$state[which(df$exit_var == "exit_oth" & df$state == 0)] = 3
View(df)
for (s in 1:3)
{
m <- matrix(ncol=3,nrow=length(date))
m[,1] <- s
m[,2] <- date
for (a in 1:length(date))
{
m[a,3]<- length(which(exit_data$annee==date[a] & data$state == s))/length(which(exit_data$annee==date[a]))
}
df <- rbind(df,as.data.frame(m))
}
names(df) <- c("status","date","pct")
df$status2 <- as.factor(df$state)
df <- data.frame(Annee=numeric(),Status=numeric(),pct=numeric())
date <- seq(2011, 2015)
for (s in 1:3)
{
m <- matrix(ncol=3,nrow=length(date))
m[,1] <- s
m[,2] <- date
for (a in 1:length(date))
{
m[a,3]<- length(which(exit_data$annee==date[a] & data$state == s))/length(which(exit_data$annee==date[a]))
}
df <- rbind(df,as.data.frame(m))
}
names(df) <- c("status","date","pct")
df$status2 <- as.factor(df$state)
n_id = nrow(exit_data)
exit_data =  exit_data[rep(seq_len(nrow(exit_data)), each=5),]
exit_data$annee = rep(seq(2011, 2015), n_id)
exit_data$state = ifelse(exit_data$annee <= exit_data$year_exit, 1, 0)
exit_data$state[which(exit_data)] = 2
exit_data$state[which(exit_data$exit_var == "exit_oth" & exit_data$state == 0)] = 3
exit = extract_exit(output_global, "situation")
exit_data = exit
n_id = nrow(exit_data)
exit_data =  exit_data[rep(seq_len(nrow(exit_data)), each=5),]
exit_data$annee = rep(seq(2011, 2015), n_id)
exit_data$state = ifelse(exit_data$annee <= exit_data$year_exit, 1, 0)
exit_data$state[which(exit_data)] = 2
exit_data$state[which(exit_data$exit_var == "exit_oth" & exit_data$state == 0)] = 3
exit_data$state[which(exit_data$exit_var == "exit_next" & exit_data$state == 0)] = 2
exit_data$state[which(exit_data$exit_var == "exit_oth" & exit_data$state == 0)] = 3
View(exit_data)
df <- data.frame(Annee=numeric(),Status=numeric(),pct=numeric())
date <- seq(2011, 2015)
df <- data.frame(Annee=numeric(),Status=numeric(),pct=numeric())
date <- seq(2011, 2015)
for (s in 1:3)
{
m <- matrix(ncol=3,nrow=length(date))
m[,1] <- s
m[,2] <- date
for (a in 1:length(date))
{
m[a,3]<- length(which(exit_data$annee==date[a] & exit_data$state == s))/length(which(exit_data$annee==date[a]))
}
df <- rbind(df,as.data.frame(m))
}
names(df) <- c("status","date","pct")
df$status2 <- as.factor(df$state)
df
df$state
df$status2 <- as.factor(df$status)
ggplot(df, aes(x=age, y=pct, fill=status2)) + geom_area()+
scale_fill_manual(name="Labor force status", values = n_col[1:6], labels=s_titles)+
scale_y_continuous( expand = c(0, 0)) +  scale_x_continuous( expand = c(0, 0)) +
xlab("Age")+ylab("Proportion in each state")  + theme_bw()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(df, aes(x=age, y=pct, fill=status2)) + geom_area()+
scale_fill_manual(name="Labor force status", values = n_col[1:6], labels=s_titles)+
scale_y_continuous( expand = c(0, 0)) +  scale_x_continuous( expand = c(0, 0)) +
xlab("Age")+ylab("Proportion in each state")  + theme_bw()
#dev.off()
install.packages("lazyeval")
library(ggplot2)
library(lazyeval)
save(output_global, file = paste0(simul_path, "predictions.Rdata"))
